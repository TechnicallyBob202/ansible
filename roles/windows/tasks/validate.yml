---
# Validate Windows configuration - handles DCs and non-DCs differently

- name: Test WinRM connectivity
  ansible.windows.win_ping:
  register: ping_test

- name: Get network configuration
  ansible.windows.win_shell: |
    $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
    $ip = Get-NetIPAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4
    $dns = Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4
    $gateway = Get-NetRoute -InterfaceAlias $adapter.Name -DestinationPrefix "0.0.0.0/0" | Select-Object -First 1

    [PSCustomObject]@{
      Hostname = $env:COMPUTERNAME
      IPAddress = $ip.IPAddress
      Gateway = $gateway.NextHop
      DNS = $dns.ServerAddresses -join ","
      AdapterName = $adapter.Name
    } | ConvertTo-Json
  register: network_info
  changed_when: false

- name: Parse network information
  set_fact:
    network_config: "{{ network_info.stdout | from_json }}"

- name: Check if this is a domain controller
  ansible.windows.win_shell: |
    try {
      Get-ADDomain -ErrorAction Stop | Out-Null
      Write-Output "true"
    } catch {
      Write-Output "false"
    }
  register: dc_check
  changed_when: false
  failed_when: false

- name: Set DC flag
  set_fact:
    is_dc: "{{ 'true' in dc_check.stdout }}"

- name: Validate IP address
  assert:
    that:
      - network_config.IPAddress == ansible_host
    fail_msg: "IP mismatch: Expected {{ ansible_host }}, got {{ network_config.IPAddress }}"
    success_msg: "IP address validated: {{ ansible_host }}"

- name: Validate hostname
  assert:
    that:
      - network_config.Hostname == inventory_hostname
    fail_msg: "Hostname mismatch: Expected {{ inventory_hostname }}, got {{ network_config.Hostname }}"
    success_msg: "Hostname validated: {{ inventory_hostname }}"

# For DCs: Just verify DNS is configured (don't validate specific values since they're dynamic)
- name: Validate DC has DNS configured
  assert:
    that:
      - network_config.DNS | length > 0
    fail_msg: "DC has no DNS servers configured"
    success_msg: "DC DNS configured: {{ network_config.DNS }}"
  when: is_dc

# For non-DCs: Validate they have at least one DC in their DNS
- name: Validate non-DC DNS includes at least one DC
  assert:
    that:
      - "'192.168.35.20' in network_config.DNS or '192.168.35.30' in network_config.DNS"
    fail_msg: "Non-DC missing DC DNS servers. Current: {{ network_config.DNS }}"
    success_msg: "Non-DC DNS includes DCs"
  when: not is_dc

# Fix non-DC DNS if needed
- name: Fix non-DC DNS if incorrect
  ansible.windows.win_shell: |
    $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
    Set-DnsClientServerAddress -InterfaceAlias $adapter.Name `
      -ServerAddresses "{{ windows_dns_servers | join('","') }}"
    Clear-DnsClientCache
  when:
    - not is_dc
    - "'192.168.35.20' not in network_config.DNS and '192.168.35.30' not in network_config.DNS"
  register: dns_fix

- name: Display validation summary
  debug:
    msg:
      - "Validation complete for {{ inventory_hostname }}"
      - "  Type: {{ 'Domain Controller' if is_dc else 'Non-DC' }}"
      - "  WinRM: {{ 'OK' if ping_test is succeeded else 'FAILED' }}"
      - "  IP: {{ network_config.IPAddress }} {{ '✓' if network_config.IPAddress == ansible_host else '✗' }}"
      - "  Hostname: {{ network_config.Hostname }} {{ '✓' if network_config.Hostname == inventory_hostname else '✗' }}"
      - "  Gateway: {{ network_config.Gateway }}"
      - "  DNS: {{ network_config.DNS }}"
      - "  DNS Status: {{ 'FIXED' if dns_fix is defined and dns_fix.changed else 'OK' }}"