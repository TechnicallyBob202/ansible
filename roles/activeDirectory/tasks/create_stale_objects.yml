---
# Create stale/inactive objects for realism

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"
    computers_ou: "OU=Computers,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"

- name: Mark computers as stale
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    $searchBase = "{{ computers_ou }}"
    $allComputers = Get-ADComputer -Filter * -SearchBase $searchBase

    if (-not $allComputers) {
      Write-Output "Marked 0 computers as stale"
      exit 0
    }

    $desired = {{ ((populate_computer_count | default(47)) * (populate_stale_computer_percentage | default(30)) / 100) | int }}
    if ($desired -lt 0) { $desired = 0 }
    if ($desired -gt $allComputers.Count) { $desired = $allComputers.Count }

    if ($desired -eq 0) {
      Write-Output "Marked 0 computers as stale"
      exit 0
    }

    $computers = $allComputers | Get-Random -Count $desired

    $count = 0
    foreach ($computer in $computers) {
      try {
        # Set last logon to >90 days ago
        $staleDate = (Get-Date).AddDays(-120)
        Set-ADComputer -Identity $computer -Replace @{ lastLogonTimestamp = $staleDate.ToFileTime() } -ErrorAction Stop

        # Disable ~50% of them
        if ((Get-Random -Minimum 1 -Maximum 100) -lt 50) {
          Disable-ADAccount -Identity $computer -ErrorAction SilentlyContinue
        }
        $count++
      } catch {
        # ignore failures
      }
    }

    Write-Output "Marked $count computers as stale"
  register: stale_computers
  changed_when: >
    {{
      'Marked' in (stale_computers.stdout | default('')) and
      ((stale_computers.stdout | default('') | regex_replace('[^0-9]', '') | int) > 0)
    }}

- name: Display stale object summary
  debug:
    msg: "{{ stale_computers.stdout | trim }}"