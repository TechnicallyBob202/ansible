---
# Promote server to first DC in child domain

- name: Check if already promoted
  include_tasks: check_domain_status.yml

# Pre-DNS for child PDCs (parent = alpine, static-IP)
- name: Set DNS for child PDCs (pre-promo -> parent alpine root)
  set_fact:
    windows_dns_servers: "{{ [ hostvars[groups['alpine_forest_root_pdc'][0]].ansible_host ] }}"
  when: >
    inventory_hostname in (groups['mauna_child_pdc'] | default([]))
    or
    inventory_hostname in (groups['rainier_child_pdc'] | default([]))

- name: Apply DNS (pre-promo)
  include_role:
    name: windows
    tasks_from: set_dns.yml
  when: windows_dns_servers is defined

- name: Get parent domain credentials
  set_fact:
    parent_netbios: "{{ parent_domain.split('.')[0] | upper }}"
  when: not domain_exists

- name: Promote to child domain PDC
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    Import-Module ADDSDeployment

    $SecurePassword = ConvertTo-SecureString "{{ ad_safe_mode_password }}" -AsPlainText -Force
    # Use UPN to avoid NetBIOS dependency
    $ParentCred = New-Object System.Management.Automation.PSCredential("Administrator@{{ parent_domain }}", $SecurePassword)

    $params = @{
      DomainName                    = "{{ domain_name }}"                 # e.g. "mauna.alpine.lab"
      DomainType                    = "ChildDomain"
      ParentDomainName              = "{{ parent_domain }}"               # e.g. "alpine.lab"
      Credential                    = $ParentCred
      SafeModeAdministratorPassword = $SecurePassword
      InstallDNS                    = ${{ ad_install_dns | ternary('true','false') }}
      DatabasePath                  = "{{ ad_database_path }}"
      SysvolPath                    = "{{ ad_sysvol_path }}"
      LogPath                       = "{{ ad_log_path }}"
      Force                         = $true
      NoRebootOnCompletion          = $false
    }

    Install-ADDSDomain @params
  when: not domain_exists
  register: child_promotion

# NOTE: Cannot use async with PowerShell commands that trigger reboots
- name: Wait for child domain DC to reboot and come back
  wait_for_connection:
    timeout: "{{ ad_reboot_timeout }}"
    delay: 90
  when: child_promotion.changed

- name: Wait for Active Directory Web Services
  ansible.windows.win_service:
    name: ADWS
    state: started
  register: adws_service
  retries: 15
  delay: 30
  until: adws_service.state == 'running'
  when: child_promotion.changed

# Post-DNS for child PDCs: self + alpine root
- name: Set DNS for child PDCs (post-promo)
  set_fact:
    windows_dns_servers: "{{ [ ansible_host, hostvars[groups['alpine_forest_root_pdc'][0]].ansible_host ] }}"
  when: >
    inventory_hostname in (groups['mauna_child_pdc'] | default([]))
    or
    inventory_hostname in (groups['rainier_child_pdc'] | default([]))

- name: Apply DNS (post-promo)
  include_role:
    name: windows
    tasks_from: set_dns.yml
  when: windows_dns_servers is defined

- name: Get new domain SID
  ansible.windows.win_shell: |
    Start-Sleep -Seconds 30
    $domain = Get-ADDomain -Identity "{{ domain_name }}"
    Write-Output $domain.DomainSID.Value
  register: new_domain_sid
  retries: 5
  delay: 30
  until: new_domain_sid.rc == 0
  when: child_promotion.changed

- name: Update domain SID fact
  set_fact:
    domain_sid: "{{ new_domain_sid.stdout | trim }}"
  when: child_promotion.changed

- name: Save domain SID to localhost
  copy:
    content: "{{ domain_name }}={{ domain_sid }}\n"
    dest: "/tmp/domain-sid-{{ domain_name | replace('.', '-') }}.txt"
  delegate_to: localhost
  when: child_promotion.changed

- name: Display promotion result
  debug:
    msg:
      - "{{ inventory_hostname }} - Child Domain {{ 'promoted' if child_promotion.changed else 'already exists' }}"
      - "  Domain: {{ domain_name }}"
      - "  Parent: {{ parent_domain }}"
      - "  NetBIOS: {{ netbios_name }}"
      - "  SID: {{ domain_sid }}"