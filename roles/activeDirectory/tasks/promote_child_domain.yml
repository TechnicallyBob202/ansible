---
# Promote server to first DC in child domain

- name: Check if already promoted
  include_tasks: check_domain_status.yml

# Strong idempotency guards (local and AD)
- name: Detect if this host is already a DC
  ansible.windows.win_shell: "(Get-CimInstance -ClassName Win32_ComputerSystem).DomainRole"
  register: dc_role
  changed_when: false
  failed_when: false

- name: Set is_domain_controller fact
  set_fact:
    is_domain_controller: "{{ (dc_role.stdout | trim | int) >= 4 }}"

- name: Detect if child domain already exists
  ansible.windows.win_shell: |
    try {
      Import-Module ActiveDirectory -ErrorAction SilentlyContinue
      Get-ADDomain -Identity "{{ domain_name }}" -ErrorAction Stop | Out-Null
      'FOUND'
    } catch { 'MISSING' }
  register: child_domain_probe
  changed_when: false
  failed_when: false

- name: Set child_domain_exists fact
  set_fact:
    child_domain_exists: "{{ (child_domain_probe.stdout | trim) == 'FOUND' }}"

# Pre-DNS for child PDCs (parent = alpine, static-IP)
- name: Set DNS for child PDCs (pre-promo -> parent alpine root)
  set_fact:
    windows_dns_servers: "{{ [ hostvars[groups['alpine_forest_root_pdc'][0]].ansible_host ] }}"
  when: >
    inventory_hostname in (groups['mauna_child_pdc'] | default([]))
    or
    inventory_hostname in (groups['rainier_child_pdc'] | default([]))

- name: Apply DNS (pre-promo)
  include_role:
    name: windows
    tasks_from: set_dns.yml
  when: windows_dns_servers is defined

# Promote child domain with Microsoft AD module (parent creds via UPN)
- name: Promote to child domain PDC
  microsoft.ad.domain:
    dns_domain_name: "{{ domain_name }}"            # e.g., "mauna.alpine.lab"
    parent_domain_name: "{{ parent_domain }}"       # e.g., "alpine.lab"
    domain_netbios_name: "{{ netbios_name }}"
    domain_admin_user: "Administrator@{{ parent_domain }}"
    domain_admin_password: "{{ ad_safe_mode_password }}"
    safe_mode_password: "{{ ad_safe_mode_password }}"
    install_dns: "{{ ad_install_dns }}"
    database_path: "{{ ad_database_path }}"
    sysvol_path: "{{ ad_sysvol_path }}"
    log_path: "{{ ad_log_path }}"
    reboot: yes
  when:
    - not is_domain_controller | default(false)
    - not child_domain_exists | default(false)
  register: child_promotion

# NOTE: Cannot use async with reboots
- name: Wait for child domain DC to reboot and come back
  wait_for_connection:
    timeout: "{{ ad_reboot_timeout }}"
    delay: 90
  when: child_promotion.changed

- name: Wait for Active Directory Web Services
  ansible.windows.win_service:
    name: ADWS
    state: started
  register: adws_service
  retries: 15
  delay: 30
  until: adws_service.state == 'running'
  when: child_promotion.changed

# Post-DNS for child PDCs: self + alpine root
- name: Set DNS for child PDCs (post-promo)
  set_fact:
    windows_dns_servers: "{{ [ ansible_host, hostvars[groups['alpine_forest_root_pdc'][0]].ansible_host ] }}"
  when: >
    inventory_hostname in (groups['mauna_child_pdc'] | default([]))
    or
    inventory_hostname in (groups['rainier_child_pdc'] | default([]))

- name: Apply DNS (post-promo)
  include_role:
    name: windows
    tasks_from: set_dns.yml
  when: windows_dns_servers is defined

- name: Get new domain SID
  ansible.windows.win_shell: |
    Start-Sleep -Seconds 30
    $domain = Get-ADDomain -Identity "{{ domain_name }}"
    Write-Output $domain.DomainSID.Value
  register: new_domain_sid
  retries: 5
  delay: 30
  until: new_domain_sid.rc == 0
  when: child_promotion.changed

- name: Update domain SID fact
  set_fact:
    domain_sid: "{{ new_domain_sid.stdout | trim }}"
  when: child_promotion.changed

- name: Save domain SID to localhost
  copy:
    content: "{{ domain_name }}={{ domain_sid }}\n"
    dest: "/tmp/domain-sid-{{ domain_name | replace('.', '-') }}.txt"
  delegate_to: localhost
  when: child_promotion.changed

- name: Display promotion result
  debug:
    msg:
      - "{{ inventory_hostname }} - Child Domain {{ 'promoted' if child_promotion.changed else 'already exists' }}"
      - "  Domain: {{ domain_name }}"
      - "  Parent: {{ parent_domain }}"
      - "  NetBIOS: {{ netbios_name }}"
      - "  SID: {{ domain_sid }}"