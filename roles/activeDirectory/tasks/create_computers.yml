---
# Create computer accounts (workstations and servers) based on computer_roles

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"
    workstations_ou: "OU=Workstations,OU=Computers,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"
    servers_ou: "OU=Servers,OU=Computers,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"

# Prepare a weighted OS list like ["WIN10","WIN10",...,"WIN11",...]
- name: Build weighted workstation OS list
  set_fact:
    ws_os_weighted: >-
      {{
        computer_roles.workstation.os_types
        | map('extract', {'name':'name','weight':'weight'})
        | list
        | map('combine', [])
        | map('json_query', '{name: name, weight: weight}')
        | list
      }}

- name: Expand weighted OS list into array
  set_fact:
    ws_os_expanded: >-
      {{
        ws_os_weighted
        | map('community.general.lists_repeat', attribute='name', count_attribute='weight')
        | list | flatten
      }}

# Workstations
- name: Create workstation computer accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $ouPath = "{{ workstations_ou }}"
    $count = {{ populate_workstations | default(35) }}
    $createdCount = 0
    $existingCount = 0

    # OS pool from Ansible (JSON -> PS array)
    $osJson = @'
    {{ ws_os_expanded | to_json }}
    '@
    $osPool = $osJson | ConvertFrom-Json
    if (-not $osPool -or $osPool.Count -eq 0) { $osPool = @("WIN10","WIN11") }

    for ($i = 1; $i -le $count; $i++) {
      $os = $osPool | Get-Random
      $computerName = "WKS-$($os)-{0:D3}" -f $i
      try {
        Get-ADComputer -Identity $computerName -ErrorAction Stop | Out-Null
        $existingCount++
      } catch {
        New-ADComputer -Name $computerName `
          -Path $ouPath `
          -Enabled $true `
          -Description "Workstation $i ($os)" `
          -ErrorAction Stop | Out-Null
        $createdCount++
      }
    }
    Write-Output "CREATED=$createdCount;EXISTS=$existingCount"
  register: workstation_creation
  changed_when: "'CREATED=' in workstation_creation.stdout and (workstation_creation.stdout | regex_search('CREATED=([0-9]+)', '\\1') | first | int) > 0"

# Servers (derive names from role list)
- name: Create server computer accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $ouPath = "{{ servers_ou }}"

    # Roles from Ansible (JSON -> PS array)
    $rolesJson = @'
    {{ (computer_roles.server.roles | default([])) | to_json }}
    '@
    $roles = $rolesJson | ConvertFrom-Json
    if (-not $roles -or $roles.Count -eq 0) {
      $roles = @("APP","DB","FILE","PRINT","WEB","SQL","EXCH","SCCM","WSUS")
    }

    $createdCount = 0
    $existingCount = 0

    foreach ($role in $roles) {
      # Create two servers per role (01, 02) to mirror your previous volume
      foreach ($n in 1..2) {
        $computerName = "SRV-$($role){0:D2}" -f $n
        try {
          Get-ADComputer -Identity $computerName -ErrorAction Stop | Out-Null
          $existingCount++
        } catch {
          New-ADComputer -Name $computerName `
            -Path $ouPath `
            -Enabled $true `
            -Description "$role Server $n" `
            -ErrorAction Stop | Out-Null
          $createdCount++
        }
      }
    }

    Write-Output "CREATED=$createdCount;EXISTS=$existingCount"
  register: server_creation
  changed_when: "'CREATED=' in server_creation.stdout and (server_creation.stdout | regex_search('CREATED=([0-9]+)', '\\1') | first | int) > 0"

- name: Parse computer creation results
  set_fact:
    workstations_created: "{{ workstation_creation.stdout | regex_search('CREATED=([0-9]+)', '\\1') | first | default('0') }}"
    workstations_existing: "{{ workstation_creation.stdout | regex_search('EXISTS=([0-9]+)', '\\1') | first | default('0') }}"
    servers_created: "{{ server_creation.stdout | regex_search('CREATED=([0-9]+)', '\\1') | first | default('0') }}"
    servers_existing: "{{ server_creation.stdout | regex_search('EXISTS=([0-9]+)', '\\1') | first | default('0') }}"

- name: Display computer creation summary
  debug:
    msg:
      - "Computers created for {{ domain_name }}:"
      - "  Workstations: {{ workstations_created }} created, {{ workstations_existing }} existed"
      - "  Servers: {{ servers_created }} created, {{ servers_existing }} existed"
      - "  Total: {{ (workstations_created | int) + (servers_created | int) }} new computers"