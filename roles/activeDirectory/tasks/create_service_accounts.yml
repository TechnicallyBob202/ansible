---
# Create service accounts for ADFR and DSP in the ServiceAccounts OU

- name: Get domain distinguished name and NetBIOS name
  ansible.windows.win_shell: |
    $domain = Get-ADDomain -Identity "{{ domain_name }}"
    [PSCustomObject]@{
      DN = $domain.DistinguishedName
      NetBIOS = $domain.NetBIOSName
    } | ConvertTo-Json
  register: domain_info_result
  changed_when: false

- name: Parse domain information
  set_fact:
    domain_dn: "{{ (domain_info_result.stdout | from_json).DN }}"
    domain_netbios: "{{ (domain_info_result.stdout | from_json).NetBIOS }}"

- name: Set ServiceAccounts OU path
  set_fact:
    service_accounts_ou: "OU=ServiceAccounts,OU={{ domain_netbios }},{{ domain_dn }}"

- name: Verify ServiceAccounts OU exists
  ansible.windows.win_shell: |
    try {
      Get-ADOrganizationalUnit -Identity "{{ service_accounts_ou }}" -ErrorAction Stop
      Write-Output "EXISTS"
    } catch {
      Write-Output "NOT_EXISTS"
    }
  register: ou_check
  changed_when: false
  failed_when: "'NOT_EXISTS' in ou_check.stdout"

- name: Display ServiceAccounts OU path
  debug:
    msg: "Service accounts will be created in: {{ service_accounts_ou }}"

- name: Check if service accounts already exist and get their details
  ansible.windows.win_shell: |
    try {
      $user = Get-ADUser -Identity "{{ item.name }}" -Properties DistinguishedName -ErrorAction Stop
      [PSCustomObject]@{
        Status = "EXISTS"
        DN = $user.DistinguishedName
        InCorrectOU = ($user.DistinguishedName -like "*,{{ service_accounts_ou }}")
      } | ConvertTo-Json -Compress
    } catch {
      Write-Output '{"Status":"NOT_EXISTS"}'
    }
  loop: "{{ ad_service_accounts }}"
  register: account_check
  changed_when: false

- name: Create new service accounts in ServiceAccounts OU
  ansible.windows.win_shell: |
    $SecurePassword = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force
    New-ADUser -Name "{{ item.item.name }}" `
      -SamAccountName "{{ item.item.name }}" `
      -UserPrincipalName "{{ item.item.name }}@{{ domain_name }}" `
      -Description "{{ item.item.description }}" `
      -Path "{{ service_accounts_ou }}" `
      -AccountPassword $SecurePassword `
      -Enabled $true `
      -PasswordNeverExpires $true `
      -CannotChangePassword $true
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "NOT_EXISTS"
  register: account_creation

- name: Move existing service accounts to ServiceAccounts OU
  ansible.windows.win_shell: |
    $user = Get-ADUser -Identity "{{ item.item.name }}"
    Move-ADObject -Identity $user.DistinguishedName -TargetPath "{{ service_accounts_ou }}"
    Write-Output "Moved {{ item.item.name }} to {{ service_accounts_ou }}"
  loop: "{{ account_check.results }}"
  when:
    - (item.stdout | from_json).Status == "EXISTS"
    - not (item.stdout | from_json).InCorrectOU
  register: account_moved

- name: Reset passwords for existing service accounts
  ansible.windows.win_shell: |
    $SecurePassword = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force
    Set-ADAccountPassword -Identity "{{ item.item.name }}" -NewPassword $SecurePassword -Reset
    Set-ADUser -Identity "{{ item.item.name }}" `
      -PasswordNeverExpires $true `
      -CannotChangePassword $true `
      -Enabled $true
    Write-Output "Password reset for {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "EXISTS"
  register: password_reset

- name: Add service accounts to groups
  ansible.windows.win_shell: |
    Add-ADGroupMember -Identity "{{ item.1 }}" -Members "{{ item.0.item.name }}" -ErrorAction SilentlyContinue
  loop: "{{ query('subelements', account_check.results, 'item.groups', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.item.name }} -> {{ item.1 }}"
  register: group_membership

- name: Grant replication permissions
  ansible.windows.win_shell: |
    $domain = Get-ADDomain
    $user = Get-ADUser -Identity "{{ item.item.name }}"
    $acl = Get-Acl -Path "AD:$($domain.DistinguishedName)"

    # Replicating Directory Changes
    $sid = [System.Security.Principal.SecurityIdentifier]$user.SID
    $ace1 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow",
      [System.Guid]"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"
    )

    # Replicating Directory Changes All
    $ace2 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow",
      [System.Guid]"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"
    )

    $acl.AddAccessRule($ace1)
    $acl.AddAccessRule($ace2)
    Set-Acl -Path "AD:$($domain.DistinguishedName)" -AclObject $acl
  loop: "{{ account_check.results }}"
  register: replication_perms

- name: Get created service account details
  ansible.windows.win_shell: |
    $accounts = @()
    {% for account in ad_service_accounts %}
    $user = Get-ADUser -Identity "{{ account.name }}" -Properties DistinguishedName, MemberOf
    $accounts += [PSCustomObject]@{
      Name = $user.Name
      DN = $user.DistinguishedName
      Groups = ($user.MemberOf | ForEach-Object { ($_ -split ',')[0] -replace 'CN=' }) -join ', '
    }
    {% endfor %}
    $accounts | ConvertTo-Json
  register: account_details
  changed_when: false

- name: Display service account creation result
  debug:
    msg:
      - "Service accounts for {{ domain_name }}:"
      - "  Location: {{ service_accounts_ou }}"
      - "  Accounts: {{ ad_service_accounts | map(attribute='name') | join(', ') }}"
      - ""
      - "Actions taken:"
      - "  Created: {{ account_check.results | selectattr('stdout', 'search', 'NOT_EXISTS') | list | length }}"
      - "  Moved: {{ account_moved.results | selectattr('changed', 'equalto', true) | list | length if account_moved.results is defined else 0 }}"
      - "  Password reset: {{ password_reset.results | selectattr('changed', 'equalto', true) | list | length if password_reset.results is defined else 0 }}"
      - ""
      - "Account Details:"
      - "{{ account_details.stdout | from_json | to_nice_yaml }}"