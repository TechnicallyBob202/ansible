---
# Create service accounts for ADFR and DSP in the Service Accounts OU

- name: Get domain distinguished name and NetBIOS name
  ansible.windows.win_shell: |
    $domain = Get-ADDomain -Identity "{{ domain_name }}"
    [PSCustomObject]@{
      DN = $domain.DistinguishedName
      NetBIOS = $domain.NetBIOSName
    } | ConvertTo-Json
  register: domain_info_result
  changed_when: false

- name: Parse domain information
  set_fact:
    domain_dn: "{{ (domain_info_result.stdout | from_json).DN }}"
    domain_netbios: "{{ (domain_info_result.stdout | from_json).NetBIOS }}"

- name: Set Service Accounts OU path
  set_fact:
    service_accounts_ou: "OU=Service Accounts,OU={{ domain_netbios }},{{ domain_dn }}"

- name: Verify Service Accounts OU exists
  ansible.windows.win_shell: |
    try {
      Get-ADOrganizationalUnit -Identity "{{ service_accounts_ou }}" -ErrorAction Stop | Out-Null
      Write-Output "EXISTS"
    } catch {
      Write-Output "NOT_EXISTS"
    }
  register: ou_check
  changed_when: false
  failed_when: "'NOT_EXISTS' in ou_check.stdout"

- name: Display Service Accounts OU path
  debug:
    msg: "Service accounts will be created in: {{ service_accounts_ou }}"

# 1) Presence and location
- name: Check if service accounts already exist and location
  ansible.windows.win_shell: |
    try {
      $user = Get-ADUser -Identity "{{ item.name }}" -Properties DistinguishedName -ErrorAction Stop
      $inOu = $false
      if ($user.DistinguishedName -like "*,{{ service_accounts_ou }}") { $inOu = $true }
      [PSCustomObject]@{Status="EXISTS"; InCorrectOU=$inOu; DN=$user.DistinguishedName} | ConvertTo-Json -Compress
    } catch {
      Write-Output '{"Status":"NOT_EXISTS"}'
    }
  loop: "{{ ad_service_accounts }}"
  register: account_check
  changed_when: false

- name: Create new service accounts in target OU
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $secure = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force
    New-ADUser -Name "{{ item.item.name }}" `
      -SamAccountName "{{ item.item.name }}" `
      -UserPrincipalName "{{ item.item.name }}@{{ domain_name }}" `
      -Description "{{ item.item.description | default(item.item.name) }}" `
      -Path "{{ service_accounts_ou }}" `
      -AccountPassword $secure `
      -Enabled $true `
      -PasswordNeverExpires $true `
      -CannotChangePassword $true
    Write-Output "CREATED: {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "NOT_EXISTS"
  register: account_creation
  changed_when: "'CREATED:' in (account_creation.stdout | default(''))"

- name: Move existing service accounts into Service Accounts OU (if needed)
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $user = Get-ADUser -Identity "{{ item.item.name }}" -Properties DistinguishedName
    if ($user.DistinguishedName -notlike "*,{{ service_accounts_ou }}") {
      Move-ADObject -Identity $user.DistinguishedName -TargetPath "{{ service_accounts_ou }}"
      Write-Output "MOVED: {{ item.item.name }}"
    } else {
      Write-Output "MOVED: 0"
    }
  loop: "{{ account_check.results }}"
  when:
    - (item.stdout | from_json).Status == "EXISTS"
    - not ((item.stdout | from_json).InCorrectOU)
  register: account_moved
  changed_when: "'MOVED:' in (account_moved.stdout | default('')) and not ('MOVED: 0' in (account_moved.stdout | default('')))"

# 2) Ensure password/flags
- name: Reset passwords and enforce flags for existing accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $secure = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force
    Set-ADAccountPassword -Identity "{{ item.item.name }}" -NewPassword $secure -Reset
    Set-ADUser -Identity "{{ item.item.name }}" -PasswordNeverExpires $true -CannotChangePassword $true -Enabled $true
    Write-Output "RESET: {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "EXISTS"
  register: password_reset
  changed_when: "'RESET:' in (password_reset.stdout | default(''))"

# 3) Group membership
- name: Add service accounts to groups
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $group = "{{ item.1 }}"
    $user  = "{{ item.0.item.name }}"
    try {
      Add-ADGroupMember -Identity $group -Members $user -ErrorAction SilentlyContinue
      Write-Output "ADDED: $user -> $group"
    } catch {
      Write-Output "ADDED: 0"
    }
  loop: "{{ query('subelements', account_check.results, 'item.groups', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.item.name }} -> {{ item.1 }}"
  register: group_membership
  changed_when: >
    'ADDED:' in (group_membership.stdout | default('')) and
    not ('ADDED: 0' in (group_membership.stdout | default('')))

# 4) Replication rights (DCSync)
- name: Grant replication permissions (DCSync) to service accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $domain = Get-ADDomain
    $acl = Get-Acl -Path "AD:$($domain.DistinguishedName)"
    $user = Get-ADUser -Identity "{{ item.item.name }}"

    # Replicating Directory Changes
    $sid = [System.Security.Principal.SecurityIdentifier]$user.SID
    $ace1 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow", [System.Guid]"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"
    )
    # Replicating Directory Changes All
    $ace2 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow", [System.Guid]"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"
    )

    $acl.AddAccessRule($ace1)
    $acl.AddAccessRule($ace2)
    Set-Acl -Path "AD:$($domain.DistinguishedName)" -AclObject $acl
    Write-Output "DCSYNC: {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  register: replication_perms
  changed_when: "'DCSYNC:' in (replication_perms.stdout | default(''))"

# 5) Summarize
- name: Get created service account details
  ansible.windows.win_shell: |
    $accounts = @()
    {% for account in ad_service_accounts %}
    $u = Get-ADUser -Identity "{{ account.name }}" -Properties DistinguishedName, MemberOf
    $accounts += [PSCustomObject]@{
      Name = $u.Name
      DN = $u.DistinguishedName
      Groups = ($u.MemberOf | ForEach-Object { ($_ -split ',')[0] -replace 'CN=' }) -join ', '
    }
    {% endfor %}
    $accounts | ConvertTo-Json
  register: account_details
  changed_when: false

- name: Display service account creation result
  debug:
    msg:
      - "Service accounts for {{ domain_name }}:"
      - "  Location: {{ service_accounts_ou }}"
      - "  Accounts: {{ ad_service_accounts | map(attribute='name') | join(', ') }}"
      - ""
      - "Actions taken:"
      - "  Created: {{ account_check.results | selectattr('stdout','search','NOT_EXISTS') | list | length }}"
      - "  Moved: {{ account_moved.results | selectattr('changed','equalto',true) | list | length | default(0) }}"
      - "  Password reset: {{ password_reset.results | selectattr('changed','equalto',true) | list | length | default(0) }}"
      - "  Group memberships added: {{ group_membership.results | selectattr('changed','equalto',true) | list | length | default(0) }}"
      - "  Replication grants: {{ replication_perms.results | selectattr('changed','equalto',true) | list | length | default(0) }}"
      - ""
      - "Account Details:"
      - "{{ account_details.stdout | from_json | to_nice_yaml }}"