---
# Plant security issues for demos (Kerberoasting, ASREPRoasting, etc.)

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"

- name: Create Kerberoastable service accounts (with SPNs)
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $serviceAccountsOU = "OU=Service Accounts,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $serviceAccounts = Get-ADUser -Filter * -SearchBase $serviceAccountsOU | Get-Random -Count {{ populate_kerberoastable | default(3) }}

    $count = 0
    foreach ($account in $serviceAccounts) {
      # Add SPN to make account Kerberoastable
      $spnValue = "HTTP/$($account.SamAccountName).{{ domain_name }}"
      try {
        Set-ADUser -Identity $account -ServicePrincipalNames @{Add=$spnValue} -ErrorAction SilentlyContinue
        $count++
      } catch {
        # SPN might already exist
      }
    }

    Write-Output "Kerberoastable accounts: $count"
  register: kerberoasting_setup
  changed_when: true

- name: Create ASREPRoastable accounts (no Kerberos preauth)
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $standardUsersOU = "OU=Standard Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $users = Get-ADUser -Filter * -SearchBase $standardUsersOU | Get-Random -Count {{ populate_asreproastable | default(2) }}

    $count = 0
    foreach ($user in $users) {
      try {
        Set-ADAccountControl -Identity $user -DoesNotRequirePreAuth $true -ErrorAction Stop
        $count++
      } catch {
        Write-Warning "Could not set preauth for $($user.SamAccountName)"
      }
    }

    Write-Output "ASREPRoastable accounts: $count"
  register: asrep_setup
  changed_when: true

- name: Create unconstrained delegation accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $serviceAccountsOU = "OU=Service Accounts,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $accounts = Get-ADUser -Filter * -SearchBase $serviceAccountsOU | Get-Random -Count {{ populate_unconstrained_delegation | default(2) }}

    $count = 0
    foreach ($account in $accounts) {
      try {
        Set-ADAccountControl -Identity $account -TrustedForDelegation $true -ErrorAction Stop
        $count++
      } catch {
        Write-Warning "Could not set delegation for $($account.SamAccountName)"
      }
    }

    Write-Output "Unconstrained delegation accounts: $count"
  register: delegation_setup
  changed_when: true

- name: Add passwords to user descriptions
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $standardUsersOU = "OU=Standard Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $users = Get-ADUser -Filter * -SearchBase $standardUsersOU | Get-Random -Count {{ populate_password_in_description | default(5) }}

    $count = 0
    foreach ($user in $users) {
      try {
        Set-ADUser -Identity $user -Description "Password: Summer2024!" -ErrorAction Stop
        $count++
      } catch {
        Write-Warning "Could not update description for $($user.SamAccountName)"
      }
    }

    Write-Output "Passwords in descriptions: $count"
  register: password_desc_setup
  changed_when: true

- name: Create RBCD vulnerable computers
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $workstationsOU = "OU=Workstations,OU=Computers,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $computers = Get-ADComputer -Filter * -SearchBase $workstationsOU | Get-Random -Count {{ populate_rbcd_vulnerable_computers | default(2) }}

    # Get a service account to allow delegation to
    $serviceAccountsOU = "OU=Service Accounts,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $svcAccount = Get-ADUser -Filter * -SearchBase $serviceAccountsOU | Select-Object -First 1

    if (-not $svcAccount) {
      Write-Output "No service account found for RBCD setup"
      exit 0
    }

    $count = 0
    foreach ($computer in $computers) {
      try {
        # Set msDS-AllowedToActOnBehalfOfOtherIdentity
        $sid = $svcAccount.SID
        $computerPath = $computer.DistinguishedName

        # Create security descriptor
        $SD = New-Object Security.AccessControl.RawSecurityDescriptor "O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($sid))"
        $SDbytes = New-Object byte[] ($SD.BinaryLength)
        $SD.GetBinaryForm($SDbytes, 0)

        Set-ADComputer -Identity $computer -Replace @{'msDS-AllowedToActOnBehalfOfOtherIdentity'=$SDbytes} -ErrorAction Stop
        $count++
      } catch {
        Write-Warning "Could not set RBCD for $($computer.Name): $_"
      }
    }

    Write-Output "RBCD vulnerable computers: $count"
  register: rbcd_setup
  changed_when: true

- name: Pollute AdminSDHolder (add regular user to Domain Admins temporarily)
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    if (-not [bool]::Parse("{{ populate_adminsdholder_pollution | default('no') | lower }}")) {
      Write-Output "AdminSDHolder pollution skipped (disabled)"
      exit 0
    }

    $standardUsersOU = "OU=Standard Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $user = Get-ADUser -Filter * -SearchBase $standardUsersOU | Get-Random -Count 1

    if (-not $user) {
      Write-Output "No user found for AdminSDHolder test"
      exit 0
    }

    try {
      Add-ADGroupMember -Identity "Domain Admins" -Members $user -ErrorAction Stop
      Write-Output "Added $($user.SamAccountName) to Domain Admins (AdminSDHolder pollution for demo)"
    } catch {
      Write-Output "Could not add to Domain Admins: $_"
    }
  register: adminsdholder_setup
  changed_when: true

- name: Create account with reversible encryption enabled
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $standardUsersOU = "OU=Standard Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $user = Get-ADUser -Filter * -SearchBase $standardUsersOU | Get-Random -Count 1

    if (-not $user) {
      Write-Output "No user found"
      exit 0
    }

    try {
      Set-ADAccountControl -Identity $user -AllowReversiblePasswordEncryption $true -ErrorAction Stop
      Write-Output "Enabled reversible encryption for $($user.SamAccountName)"
    } catch {
      Write-Output "Could not enable reversible encryption: $_"
    }
  register: reversible_encryption_setup
  changed_when: true

- name: Display security issues summary
  debug:
    msg:
      - "Security issues planted for {{ domain_name }} (for demo purposes):"
      - "  {{ kerberoasting_setup.stdout | trim }}"
      - "  {{ asrep_setup.stdout | trim }}"
      - "  {{ delegation_setup.stdout | trim }}"
      - "  {{ password_desc_setup.stdout | trim }}"
      - "  {{ rbcd_setup.stdout | trim }}"
      - "  {{ adminsdholder_setup.stdout | trim }}"
      - "  {{ reversible_encryption_setup.stdout | trim }}"
      - ""
      - "⚠️  These vulnerabilities are INTENTIONAL for demo/testing!"
      - "⚠️  DSP should detect and alert on these issues"