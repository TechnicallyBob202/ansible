---
# Create standard user accounts with domain-themed names

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"
    standard_users_ou: "OU=Standard Users,OU=Users,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"

- name: Define themed first/last names based on domain (uses your firstnames/lastnames as default)
  set_fact:
    themed_first_names: "{{ lookup('vars', netbios_name.lower() + '_first_names', default=firstnames) }}"
    themed_last_names:  "{{ lookup('vars', netbios_name.lower() + '_last_names',  default=lastnames) }}"

- name: Prepare JSON literals to avoid inline Jinja in script
  set_fact:
    first_names_json: "{{ themed_first_names | to_json }}"
    last_names_json: "{{ themed_last_names  | to_json }}"
    user_count_value: "{{ populate_standard_users | default(50) }}"

- name: Generate random users
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    # Receive JSON from Ansible (no inline Jinja in this block)
    $firstJson = @'
    {{ first_names_json }}
    '@

    $lastJson = @'
    {{ last_names_json }}
    '@

    # Convert JSON to PowerShell arrays
    $firstNames = $firstJson | ConvertFrom-Json
    $lastNames  = $lastJson  | ConvertFrom-Json

    $ouPath = "{{ standard_users_ou }}"
    $domain = "{{ domain_name }}"
    $userCount = [int]"{{ user_count_value }}"

    $createdUsers = @()
    $existingCount = 0

    for ($i = 1; $i -le $userCount; $i++) {
      $firstName = $firstNames | Get-Random
      $lastName = $lastNames | Get-Random
      $samAccountName = "$($firstName.Substring(0,1))$lastName".ToLower()

      # Check if user already exists
      try {
        Get-ADUser -Identity $samAccountName -ErrorAction Stop | Out-Null
        $existingCount++
        continue
      } catch {
        # proceed to create
      }

      $displayName = "$firstName $lastName"
      $upn = "$samAccountName@$domain"
      $password = ConvertTo-SecureString "Summer2024!" -AsPlainText -Force

      try {
        New-ADUser -Name $displayName `
          -GivenName $firstName `
          -Surname $lastName `
          -SamAccountName $samAccountName `
          -UserPrincipalName $upn `
          -Path $ouPath `
          -AccountPassword $password `
          -Enabled $true `
          -ChangePasswordAtLogon $false `
          -PasswordNeverExpires $true `
          -ErrorAction Stop

        $createdUsers += $samAccountName
      } catch {
        Write-Warning "Failed to create $samAccountName : $_"
      }
    }

    Write-Output "CREATED=$($createdUsers.Count);EXISTS=$existingCount"
  register: user_creation
  changed_when: >
    'CREATED=' in (user_creation.stdout | default('')) and
    (
      (user_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
      | split('=') | last | int
    ) > 0

- name: Parse user creation results
  set_fact:
    users_created: >
      {{
        (
          (user_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
          | split('=') | last
        )
      }}
    users_existing: >
      {{
        (
          (user_creation.stdout | default('') | split(';') | select('search', '^EXISTS=') | list | first | default('EXISTS=0'))
          | split('=') | last
        )
      }}

- name: Display user creation summary
  debug:
    msg:
      - "Standard Users created in {{ domain_name }}:"
      - "  Created: {{ users_created }}"
      - "  Already existed: {{ users_existing }}"
      - "  OU: {{ standard_users_ou }}"