---
# Assign users to groups to create realistic membership patterns

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"

# 1) Department group assignments for Standard Users
- name: Assign users to department security groups
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    # Get all standard users
    $standardUsersOU = "OU=Standard Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $allUsers = Get-ADUser -Filter * -SearchBase $standardUsersOU

    if (-not $allUsers -or $allUsers.Count -eq 0) {
      Write-Output "NO_USERS"
      exit 0
    }

    # Define department groups and assign random users
    $departments = @(
      "Finance-Users",
      "HR-Users",
      "Sales-Users",
      "Marketing-Users",
      "Engineering-Users"
    )

    $assignedCount = 0
    # Ensure at least 1 per dept when users exist
    $usersPerDept = [math]::Max(1, [math]::Floor($allUsers.Count / [math]::Max(1, $departments.Count)))

    # Shuffle user pool
    $userPool = $allUsers | Sort-Object {Get-Random}
    $currentIndex = 0

    foreach ($deptGroup in $departments) {
      try {
        $group = Get-ADGroup -Identity $deptGroup -ErrorAction Stop

        $endIndex = [math]::Min($currentIndex + $usersPerDept - 1, $userPool.Count - 1)
        if ($endIndex -lt $currentIndex) { continue }

        $usersForThisGroup = $userPool[$currentIndex..$endIndex]

        foreach ($user in $usersForThisGroup) {
          try {
            Add-ADGroupMember -Identity $group -Members $user -ErrorAction SilentlyContinue
            $assignedCount++
          } catch {
            # Ignore membership duplicates
          }
        }

        $currentIndex = $endIndex + 1
        if ($currentIndex -ge $userPool.Count) { break }
      } catch {
        Write-Warning "Could not assign to $deptGroup : $_"
      }
    }

    Write-Output "ASSIGNED=$assignedCount"
  register: department_assignments
  changed_when: >
    'ASSIGNED=' in (department_assignments.stdout | default('')) and
    (
      (department_assignments.stdout | default('') | split('=') | last | int) > 0
    )

# 2) Privileged users to IT groups
- name: Assign privileged users to IT groups
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    $privUsersOU = "OU=Privileged Users,OU=Users,OU={{ top_level_ou_name }},{{ domain_dn }}"
    $privUsers = Get-ADUser -Filter * -SearchBase $privUsersOU

    if (-not $privUsers -or $privUsers.Count -eq 0) {
      Write-Output "NO_USERS"
      exit 0
    }

    $assignedCount = 0

    # Randomly assign some to IT groups (clamped)
    $itGroups = @("IT-Help-Desk", "IT-Server-Admins", "IT-Network-Admins")
    foreach ($group in $itGroups) {
      try {
        $groupObj = Get-ADGroup -Identity $group -ErrorAction Stop
        $take = [Math]::Min(3, [Math]::Max(0, $privUsers.Count))
        if ($take -le 0) { continue }
        $randomUsers = $privUsers | Get-Random -Count $take
        foreach ($user in $randomUsers) {
          try {
            Add-ADGroupMember -Identity $groupObj -Members $user -ErrorAction SilentlyContinue
            $assignedCount++
          } catch {}
        }
      } catch {
        Write-Warning "Could not assign to $group"
      }
    }

    Write-Output "ASSIGNED=$assignedCount"
  register: privileged_assignments
  changed_when: >
    'ASSIGNED=' in (privileged_assignments.stdout | default('')) and
    (
      (privileged_assignments.stdout | default('') | split('=') | last | int) > 0
    )

# 3) Distribution groups across all users under the top OU
- name: Assign random users to distribution groups
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    $topOU = "OU={{ top_level_ou_name }},{{ domain_dn }}"
    $allUsers = Get-ADUser -Filter * -SearchBase $topOU

    if (-not $allUsers -or $allUsers.Count -eq 0) {
      Write-Output "NO_USERS"
      exit 0
    }

    $assignedCount = 0

    # Assign everyone to All-Company if present
    try {
      $allCompanyGroup = Get-ADGroup -Identity "All-Company" -ErrorAction Stop
      foreach ($user in $allUsers) {
        try { Add-ADGroupMember -Identity $allCompanyGroup -Members $user -ErrorAction SilentlyContinue; $assignedCount++ } catch {}
      }
    } catch {
      Write-Warning "Could not assign to All-Company"
    }

    # Assign ~30% of users to other distribution groups if present
    $distGroups = @("All-IT", "All-Finance", "All-Sales")
    foreach ($group in $distGroups) {
      try {
        $groupObj = Get-ADGroup -Identity $group -ErrorAction Stop
        $randomCount = [math]::Floor($allUsers.Count * 0.3)
        if ($randomCount -le 0) { continue }
        $randomUsers = $allUsers | Get-Random -Count $randomCount
        foreach ($user in $randomUsers) {
          try { Add-ADGroupMember -Identity $groupObj -Members $user -ErrorAction SilentlyContinue; $assignedCount++ } catch {}
        }
      } catch {
        Write-Warning "Could not assign to $group"
      }
    }

    Write-Output "ASSIGNED=$assignedCount"
  register: distribution_assignments
  changed_when: >
    'ASSIGNED=' in (distribution_assignments.stdout | default('')) and
    (
      (distribution_assignments.stdout | default('') | split('=') | last | int) > 0
    )

# Parse and summarize
- name: Parse assignment results
  set_fact:
    department_assigned: "{{ (department_assignments.stdout | default('ASSIGNED=0') | split('=') | last) }}"
    privileged_assigned: "{{ (privileged_assignments.stdout | default('ASSIGNED=0') | split('=') | last) }}"
    distribution_assigned: "{{ (distribution_assignments.stdout | default('ASSIGNED=0') | split('=') | last) }}"

- name: Display membership assignment summary
  debug:
    msg:
      - "Group memberships assigned for {{ domain_name }}:"
      - "  Department groups: {{ department_assigned }} assignments"
      - "  Privileged/IT groups: {{ privileged_assigned }} assignments"
      - "  Distribution groups: {{ distribution_assigned }} assignments"
      - "  Total: {{ (department_assigned | int) + (privileged_assigned | int) + (distribution_assigned | int) }} memberships"