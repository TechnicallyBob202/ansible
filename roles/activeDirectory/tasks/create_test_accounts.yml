---
# Create privileged users and service test accounts

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou_name: "{{ netbios_name }}"
    privileged_users_ou: "OU=Privileged Users,OU=Users,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"
    service_accounts_ou: "OU=Service Accounts,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"

- name: Create privileged users (IT staff, managers)
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $ouPath = "{{ privileged_users_ou }}"
    $domain = "{{ domain_name }}"
    $password = ConvertTo-SecureString "Winter2024!" -AsPlainText -Force

    $privilegedUsers = @(
      @{User="john.admin";      Name="John Admin";      Desc="IT Manager"},
      @{User="sarah.manager";   Name="Sarah Manager";   Desc="Operations Manager"},
      @{User="mike.itstaff";    Name="Mike ITStaff";    Desc="Senior IT Technician"},
      @{User="lisa.support";    Name="Lisa Support";    Desc="IT Support Specialist"},
      @{User="david.engineer";  Name="David Engineer";  Desc="Systems Engineer"},
      @{User="amanda.lead";     Name="Amanda Lead";     Desc="Development Lead"},
      @{User="robert.architect";Name="Robert Architect";Desc="Solutions Architect"},
      @{User="jennifer.analyst";Name="Jennifer Analyst";Desc="Security Analyst"}
    )

    $createdCount = 0
    $existingCount = 0

    foreach ($priv in $privilegedUsers) {
      try {
        Get-ADUser -Identity $priv.User -ErrorAction Stop | Out-Null
        $existingCount++
      } catch {
        $upn = "$($priv.User)@$domain"
        New-ADUser -Name $priv.Name `
          -SamAccountName $priv.User `
          -UserPrincipalName $upn `
          -Path $ouPath `
          -AccountPassword $password `
          -Enabled $true `
          -ChangePasswordAtLogon $false `
          -PasswordNeverExpires $true `
          -Description $priv.Desc `
          -ErrorAction Stop | Out-Null
        $createdCount++
      }
    }

    Write-Output "CREATED=$createdCount;EXISTS=$existingCount"
  register: privileged_creation
  changed_when: >
    {{
      'CREATED=' in (privileged_creation.stdout | default('')) and
      (
        (privileged_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
        | split('=') | last | int
      ) > 0
    }}

- name: Create additional service accounts for testing
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"
    $ouPath = "{{ service_accounts_ou }}"
    $domain = "{{ domain_name }}"
    $password = ConvertTo-SecureString "Service2024!" -AsPlainText -Force

    $serviceAccounts = @(
      @{User="svc-backup";     Desc="Backup Service Account"},
      @{User="svc-sql";        Desc="SQL Service Account"},
      @{User="svc-web";        Desc="Web Application Service Account"},
      @{User="svc-app";        Desc="Application Service Account"},
      @{User="svc-monitoring"; Desc="Monitoring Service Account"},
      @{User="svc-reporting";  Desc="Reporting Service Account"}
    )

    $createdCount = 0
    $existingCount = 0

    foreach ($svc in $serviceAccounts) {
      try {
        Get-ADUser -Identity $svc.User -ErrorAction Stop | Out-Null
        $existingCount++
      } catch {
        $upn = "$($svc.User)@$domain"
        New-ADUser -Name $svc.User `
          -SamAccountName $svc.User `
          -UserPrincipalName $upn `
          -Path $ouPath `
          -AccountPassword $password `
          -Enabled $true `
          -ChangePasswordAtLogon $false `
          -PasswordNeverExpires $true `
          -Description $svc.Desc `
          -ErrorAction Stop | Out-Null
        $createdCount++
      }
    }

    Write-Output "CREATED=$createdCount;EXISTS=$existingCount"
  register: service_creation
  changed_when: >
    {{
      'CREATED=' in (service_creation.stdout | default('')) and
      (
        (service_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
        | split('=') | last | int
      ) > 0
    }}

- name: Parse test account creation results
  set_fact:
    privileged_created: >
      {{
        (
          (privileged_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
          | split('=') | last
        )
      }}
    privileged_existing: >
      {{
        (
          (privileged_creation.stdout | default('') | split(';') | select('search', '^EXISTS=') | list | first | default('EXISTS=0'))
          | split('=') | last
        )
      }}
    service_created: >
      {{
        (
          (service_creation.stdout | default('') | split(';') | select('search', '^CREATED=') | list | first | default('CREATED=0'))
          | split('=') | last
        )
      }}
    service_existing: >
      {{
        (
          (service_creation.stdout | default('') | split(';') | select('search', '^EXISTS=') | list | first | default('EXISTS=0'))
          | split('=') | last
        )
      }}

- name: Display test account creation summary
  debug:
    msg:
      - "Test accounts created for {{ domain_name }}:"
      - "  Privileged Users: {{ privileged_created }} created, {{ privileged_existing }} already existed"
      - "  Service Accounts: {{ service_created }} created, {{ service_existing }} already existed"
      - "  Total new accounts: {{ (privileged_created | int) + (service_created | int) }}"