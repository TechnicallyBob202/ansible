---
# Create realistic user accounts distributed across OUs

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set domain DN fact
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"

- name: Calculate user counts
  set_fact:
    regular_user_count: "{{ ((populate_user_count | int * (100 - populate_stale_user_percentage | int - populate_service_account_percentage | int - populate_privileged_user_percentage | int)) / 100) | int }}"
    stale_user_count: "{{ ((populate_user_count | int * populate_stale_user_percentage | int) / 100) | int }}"

- name: Initialize empty user list
  set_fact:
    users_to_create: []

- name: Build regular users list
  set_fact:
    users_to_create: "{{ users_to_create + [user_item] }}"
  vars:
    user_item:
      firstname: "{{ firstnames | random }}"
      lastname: "{{ lastnames | random }}"
      type: "regular"
      enabled: true
  loop: "{{ range(0, regular_user_count | int) | list }}"

- name: Build stale users list
  set_fact:
    users_to_create: "{{ users_to_create + [user_item] }}"
  vars:
    user_item:
      firstname: "{{ firstnames | random }}"
      lastname: "{{ lastnames | random }}"
      type: "stale"
      enabled: false
  loop: "{{ range(0, stale_user_count | int) | list }}"

- name: Create user accounts
  ansible.windows.win_shell: |
    $ErrorActionPreference = "Stop"

    $firstname = "{{ item.firstname }}"
    $lastname = "{{ item.lastname }}"
    $username = "$($firstname).$($lastname)".ToLower()
    $domain = "{{ domain_name }}"
    $netbios = "{{ netbios_name }}"
    $domainDN = "{{ domain_dn }}"
    $enabled = ${{ item.enabled | string | lower }}

    # Check if user already exists
    try {
      Get-ADUser -Identity $username -ErrorAction Stop | Out-Null
      Write-Output "EXISTS: $username"
      exit 0
    } catch {}

    # Determine OU based on type
    $ouPath = "OU=Standard Users,OU=Users,$domainDN"

    # Generate password
    $password = ConvertTo-SecureString "{{ ad_safe_mode_password }}" -AsPlainText -Force

    # Create user
    $userParams = @{
      Name = "$firstname $lastname"
      GivenName = $firstname
      Surname = $lastname
      SamAccountName = $username
      UserPrincipalName = "$username@$domain"
      DisplayName = "$firstname $lastname"
      EmailAddress = "$username@$domain"
      Path = $ouPath
      AccountPassword = $password
      Enabled = $enabled
      ChangePasswordAtLogon = $false
      PasswordNeverExpires = $true
    }

    New-ADUser @userParams
    Write-Output "CREATED: $username"
  loop: "{{ users_to_create }}"
  register: user_creation
  changed_when: "'CREATED' in user_creation.stdout"
  failed_when: user_creation.rc != 0 and 'EXISTS' not in user_creation.stdout
  throttle: 5

- name: Count created users
  set_fact:
    created_user_count: "{{ user_creation.results | selectattr('changed', 'equalto', true) | list | length }}"
    skipped_user_count: "{{ user_creation.results | rejectattr('changed', 'equalto', true) | list | length }}"

- name: Display user creation summary
  debug:
    msg:
      - "Created {{ created_user_count }} users"
      - "Skipped {{ skipped_user_count }} existing users"