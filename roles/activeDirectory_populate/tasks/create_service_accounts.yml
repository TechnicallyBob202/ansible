---
# Create service accounts in the Service Accounts OU

- name: Get domain DN
  ansible.windows.win_shell: |
    (Get-ADDomain).DistinguishedName
  register: domain_dn_result
  changed_when: false

- name: Set facts
  set_fact:
    domain_dn: "{{ domain_dn_result.stdout | trim }}"
    top_level_ou: "{{ netbios_name }}"
    service_accounts_ou: "OU=Service Accounts,OU={{ netbios_name }},{{ domain_dn_result.stdout | trim }}"

- name: Check if service accounts already exist
  ansible.windows.win_shell: |
    try {
      $user = Get-ADUser -Identity "{{ item.name }}" -ErrorAction Stop
      $correctOU = "{{ service_accounts_ou }}"
      $userOU = ($user.DistinguishedName -split ',',2)[1]

      if ($userOU -eq $correctOU) {
        [PSCustomObject]@{
          Status = "EXISTS"
          InCorrectOU = $true
        } | ConvertTo-Json
      } else {
        [PSCustomObject]@{
          Status = "EXISTS"
          InCorrectOU = $false
          CurrentOU = $userOU
        } | ConvertTo-Json
      }
    } catch {
      [PSCustomObject]@{
        Status = "NOT_EXISTS"
      } | ConvertTo-Json
    }
  loop: "{{ ad_service_accounts }}"
  register: account_check
  changed_when: false

- name: Create new service accounts in Service Accounts OU
  ansible.windows.win_shell: |
    $SecurePassword = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force

    New-ADUser -Name "{{ item.item.name }}" `
      -SamAccountName "{{ item.item.name }}" `
      -UserPrincipalName "{{ item.item.name }}@{{ domain_name }}" `
      -Description "{{ item.item.description }}" `
      -Path "{{ service_accounts_ou }}" `
      -AccountPassword $SecurePassword `
      -Enabled $true `
      -PasswordNeverExpires $true `
      -CannotChangePassword $true

    Write-Output "CREATED: {{ item.item.name }} in {{ service_accounts_ou }}"
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "NOT_EXISTS"
  register: account_creation

- name: Move existing service accounts to Service Accounts OU
  ansible.windows.win_shell: |
    $user = Get-ADUser -Identity "{{ item.item.name }}"
    Move-ADObject -Identity $user.DistinguishedName -TargetPath "{{ service_accounts_ou }}"
    Write-Output "MOVED: {{ item.item.name }} to {{ service_accounts_ou }}"
  loop: "{{ account_check.results }}"
  when:
    - (item.stdout | from_json).Status == "EXISTS"
    - not (item.stdout | from_json).InCorrectOU
  register: account_moved

- name: Reset passwords for existing service accounts
  ansible.windows.win_shell: |
    $SecurePassword = ConvertTo-SecureString "{{ item.item.password }}" -AsPlainText -Force
    Set-ADAccountPassword -Identity "{{ item.item.name }}" -NewPassword $SecurePassword -Reset
    Set-ADUser -Identity "{{ item.item.name }}" `
      -PasswordNeverExpires $true `
      -CannotChangePassword $true `
      -Enabled $true
    Write-Output "PASSWORD_RESET: {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  when: (item.stdout | from_json).Status == "EXISTS"
  register: password_reset

- name: Add service accounts to groups
  ansible.windows.win_shell: |
    Add-ADGroupMember -Identity "{{ item.1 }}" -Members "{{ item.0.item.name }}" -ErrorAction SilentlyContinue
    Write-Output "ADDED: {{ item.0.item.name }} to {{ item.1 }}"
  loop: "{{ query('subelements', account_check.results, 'item.groups', skip_missing=True) }}"
  loop_control:
    label: "{{ item.0.item.name }} -> {{ item.1 }}"
  register: group_membership

- name: Grant replication permissions
  ansible.windows.win_shell: |
    $domain = Get-ADDomain
    $user = Get-ADUser -Identity "{{ item.item.name }}"
    $acl = Get-Acl -Path "AD:$($domain.DistinguishedName)"

    # Replicating Directory Changes
    $sid = [System.Security.Principal.SecurityIdentifier]$user.SID
    $ace1 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow",
      [System.Guid]"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2"
    )

    # Replicating Directory Changes All
    $ace2 = New-Object System.DirectoryServices.ActiveDirectoryAccessRule(
      $sid, "ExtendedRight", "Allow",
      [System.Guid]"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2"
    )

    $acl.AddAccessRule($ace1)
    $acl.AddAccessRule($ace2)
    Set-Acl -Path "AD:$($domain.DistinguishedName)" -AclObject $acl

    Write-Output "REPLICATION_RIGHTS: {{ item.item.name }}"
  loop: "{{ account_check.results }}"
  register: replication_rights

- name: Display service account creation summary
  debug:
    msg:
      - "Service accounts for {{ domain_name }}:"
      - "{% for result in account_check.results %}  {{ result.item.name }}: {{ (result.stdout | from_json).Status }}{% endfor %}"
      - "All accounts are now in: {{ service_accounts_ou }}"