---
# ==========================================
# PRE-BUILD CHECKS
# Validates that all VMs are ready for domain building
# ==========================================
# Prerequisites: Playbooks 1-3 completed successfully
# Dependencies: None
# Can be run: Anytime to validate environment
# ==========================================

- name: Pre-Build Environment Checks
  hosts: localhost
  gather_facts: yes

  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"
    required_vms:
      - { hostname: "KOA-DC", ip: "192.168.35.20", group: "arbor_forest_root_pdc" }
      - { hostname: "OAK-DC", ip: "192.168.35.21", group: "arbor_forest_root_replica" }
      - { hostname: "GRANITE-DC", ip: "192.168.35.30", group: "alpine_forest_root_pdc" }
      - { hostname: "BASALT-DC", ip: "192.168.35.31", group: "alpine_forest_root_replica" }
      - { hostname: "SLATE-DC", ip: "192.168.35.32", group: "mauna_child_pdc" }
      - { hostname: "SHALE-DC", ip: "192.168.35.33", group: "mauna_child_replica" }
      - { hostname: "MARBLE-DC", ip: "192.168.35.34", group: "rainier_child_pdc" }
      - { hostname: "QUARTZ-DC", ip: "192.168.35.35", group: "rainier_child_replica" }

  tasks:
    - name: Display check summary
      debug:
        msg:
          - "=========================================="
          - "PRE-BUILD ENVIRONMENT CHECKS"
          - "=========================================="
          - "Checking {{ required_vms | length }} domain controller VMs"
          - "Validating connectivity, DNS, and prerequisites"

    - name: Test WinRM connectivity to all DCs
      wait_for:
        host: "{{ item.ip }}"
        port: 5985
        timeout: 5
      loop: "{{ required_vms }}"
      register: winrm_check
      ignore_errors: yes

    - name: Identify offline VMs
      set_fact:
        offline_vms: "{{ winrm_check.results | selectattr('failed', 'defined') | selectattr('failed', 'equalto', true) | map(attribute='item') | list }}"
        online_vms: "{{ winrm_check.results | selectattr('failed', 'undefined') | map(attribute='item') | list }}"

    - name: Display connectivity results
      debug:
        msg:
          - "Online VMs: {{ online_vms | length }}/{{ required_vms | length }}"
          - "Offline VMs: {{ offline_vms | length }}"

    - name: Fail if any VMs are offline
      fail:
        msg: "The following VMs are offline: {{ offline_vms | map(attribute='hostname') | list | join(', ') }}"
      when: offline_vms | length > 0

    - name: Create state directory if it doesn't exist
      file:
        path: "{{ playbook_dir }}/../state"
        state: directory
        mode: '0755'

- name: Check DNS resolution on all DCs
  hosts:
    - arbor_forest_root_pdc
    - arbor_forest_root_replica
    - alpine_forest_root_pdc
    - alpine_forest_root_replica
    - mauna_child_pdc
    - mauna_child_replica
    - rainier_child_pdc
    - rainier_child_replica
  gather_facts: no
  serial: 1

  tasks:
    - name: Verify DNS servers are configured
      ansible.windows.win_powershell:
        script: |
          $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
          $dns = Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4
          if ($dns.ServerAddresses -notcontains "192.168.35.20") {
            Write-Output "MISSING_PRIMARY_DNS"
            exit 1
          }
          Write-Output "DNS_OK"
          exit 0
      register: dns_check
      failed_when: false

    - name: Display DNS status
      debug:
        msg: "{{ inventory_hostname }}: {{ 'DNS Configured' if dns_check.rc == 0 else 'DNS NOT CONFIGURED' }}"

    - name: Fail if DNS not configured
      fail:
        msg: "DNS servers not properly configured on {{ inventory_hostname }}"
      when: dns_check.rc != 0

- name: Check for existing domain memberships
  hosts:
    - arbor_forest_root_pdc
    - arbor_forest_root_replica
    - alpine_forest_root_pdc
    - alpine_forest_root_replica
    - mauna_child_pdc
    - mauna_child_replica
    - rainier_child_pdc
    - rainier_child_replica
  gather_facts: no
  serial: 1

  tasks:
    - name: Check if VM is already a domain controller
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          Write-Output "DomainRole: $($CS.DomainRole)"
          Write-Output "Domain: $($CS.Domain)"
          if ($CS.DomainRole -ge 4) {
            exit 0
          } else {
            exit 1
          }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Store DC status in fact
      set_fact:
        is_domain_controller: "{{ dc_check.rc == 0 }}"
        current_domain: "{{ dc_check.stdout_lines | select('search', 'Domain:') | first | regex_replace('Domain: ', '') }}"
      when: dc_check.stdout_lines is defined

- name: Check disk space on all DCs
  hosts:
    - arbor_forest_root_pdc
    - arbor_forest_root_replica
    - alpine_forest_root_pdc
    - alpine_forest_root_replica
    - mauna_child_pdc
    - mauna_child_replica
    - rainier_child_pdc
    - rainier_child_replica
  gather_facts: no
  serial: 1

  tasks:
    - name: "Get C: drive free space"
      ansible.windows.win_powershell:
        script: |
          $disk = Get-Volume -DriveLetter C
          $freeGB = [math]::Round($disk.SizeRemaining / 1GB, 2)
          Write-Output $freeGB
      register: disk_space

    - name: Display disk space
      debug:
        msg: "{{ inventory_hostname }}: {{ disk_space.stdout_lines[0] }}GB free"

    - name: Fail if insufficient disk space
      fail:
        msg: "Insufficient disk space on {{ inventory_hostname }}: {{ disk_space.stdout_lines[0] }}GB (need at least 20GB)"
      when: disk_space.stdout_lines[0] | float < 20

- name: Check Windows Feature requirements
  hosts:
    - arbor_forest_root_pdc
    - arbor_forest_root_replica
    - alpine_forest_root_pdc
    - alpine_forest_root_replica
    - mauna_child_pdc
    - mauna_child_replica
    - rainier_child_pdc
    - rainier_child_replica
  gather_facts: no
  serial: 1

  tasks:
    - name: Check for pending reboots
      ansible.windows.win_powershell:
        script: |
          $reboot = $false
          if (Get-ChildItem "HKLM:\Software\Microsoft\Windows\CurrentVersion\Component Based Servicing\RebootPending" -EA Ignore) { $reboot = $true }
          if (Get-Item "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update\RebootRequired" -EA Ignore) { $reboot = $true }
          if ($reboot) {
            Write-Output "REBOOT_PENDING"
            exit 1
          } else {
            Write-Output "NO_REBOOT_NEEDED"
            exit 0
          }
      register: reboot_check
      failed_when: false

    - name: Warn about pending reboots
      debug:
        msg: "WARNING: {{ inventory_hostname }} has a pending reboot. Please reboot before continuing."
      when: reboot_check.rc != 0

- name: Summary and recommendations
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Save pre-build check results
      copy:
        content: |
          # Pre-Build Check Results
          # Generated: {{ ansible_date_time.iso8601 }}

          All checks passed: YES
          VMs checked: {{ hostvars | dict2items | selectattr('key', 'match', '.*-DC') | list | length }}
          Environment ready: YES

          Next steps:
          1. Run: ansible-playbook 4b-build-arbor-forest-root.yml
          2. Run: ansible-playbook 4c-build-alpine-forest-root.yml
          3. Or run: ansible-playbook 4-build-all-forests.yml (orchestrator)
        dest: "{{ playbook_dir }}/../state/pre-build-check-results.txt"
        mode: '0644'

    - name: Display completion message
      debug:
        msg:
          - "=========================================="
          - "âœ… PRE-BUILD CHECKS COMPLETED"
          - "=========================================="
          - "All VMs are online and ready"
          - "DNS is properly configured"
          - "Disk space is sufficient"
          - "No pending reboots detected"
          - ""
          - "Ready to begin forest builds!"
          - "=========================================="