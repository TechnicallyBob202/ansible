---
- name: Configure DNS on All Domain Controllers
  hosts: domain_controllers
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"

  tasks:
    - name: Get current domain info
      ansible.windows.win_powershell:
        script: |
          try {
            $domain = Get-ADDomain -ErrorAction Stop
            Write-Output "DOMAIN:$($domain.DNSRoot)"
            Write-Output "NETBIOS:$($domain.NetBIOSName)"
          } catch {
            Write-Output "NOT_A_DC"
          }
      register: current_domain
      failed_when: false
      changed_when: false

    - name: Parse domain info
      set_fact:
        is_domain_controller: "{{ 'DOMAIN:' in current_domain.output[0] }}"
        domain_dns_name: "{{ current_domain.output[0] | regex_replace('^DOMAIN:', '') if current_domain.output | length > 0 and 'DOMAIN:' in current_domain.output[0] else '' }}"
        domain_netbios: "{{ current_domain.output[1] | regex_replace('^NETBIOS:', '') if current_domain.output | length > 1 and 'NETBIOS:' in current_domain.output[1] else '' }}"
      when: current_domain.output is defined and current_domain.output | length > 0

    - name: Skip if not a DC
      meta: end_host
      when: not is_domain_controller | default(false)

    - name: Display current domain
      debug:
        msg: "DC {{ inventory_hostname }} is in domain {{ domain_dns_name }} ({{ domain_netbios }})"

    - name: Configure DNS forwarders
      ansible.windows.win_powershell:
        script: |
          Set-DnsServerForwarder -IPAddress "1.1.1.1","8.8.8.8" -PassThru | Out-Null
          Write-Output "DNS forwarders configured"
      register: dns_forwarders_result

    - name: Configure DNS to point to self and other DCs
      ansible.windows.win_powershell:
        script: |
          $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
          
          # Get self IP
          $selfIP = (Get-NetIPAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4).IPAddress
          
          # Build DNS server list based on domain
          $domain = (Get-ADDomain).DNSRoot
          $dnsServers = @($selfIP)  # Self first
          
          switch ($domain) {
            "arbor.lab" {
              $allDCs = @("192.168.35.20", "192.168.35.21")
              $dnsServers += $allDCs | Where-Object { $_ -ne $selfIP }
            }
            "alpine.lab" {
              $allDCs = @("192.168.35.30", "192.168.35.31")
              $dnsServers += $allDCs | Where-Object { $_ -ne $selfIP }
            }
            "mauna.alpine.lab" {
              $allDCs = @("192.168.35.32", "192.168.35.33")
              $dnsServers += $allDCs | Where-Object { $_ -ne $selfIP }
              # Add parent domain DCs
              $dnsServers += @("192.168.35.30", "192.168.35.31")
            }
            "rainier.alpine.lab" {
              $allDCs = @("192.168.35.34", "192.168.35.35")
              $dnsServers += $allDCs | Where-Object { $_ -ne $selfIP }
              # Add parent domain DCs
              $dnsServers += @("192.168.35.30", "192.168.35.31")
            }
          }
          
          # Set DNS servers
          Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses $dnsServers
          
          # Verify
          $configured = (Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4).ServerAddresses
          Write-Output "Configured DNS servers: $($configured -join ', ')"
      register: dns_config_result

    - name: Display DNS configuration
      debug:
        msg: "{{ dns_config_result.output }}"
      when: dns_config_result.output is defined

    - name: Test DNS resolution for both forests
      ansible.windows.win_powershell:
        script: |
          $results = @()
          
          # Test arbor.lab
          try {
            $resolve = Resolve-DnsName "arbor.lab" -Type SOA -ErrorAction Stop
            $results += "✓ arbor.lab resolves"
          } catch {
            $results += "✗ arbor.lab failed"
          }
          
          # Test alpine.lab
          try {
            $resolve = Resolve-DnsName "alpine.lab" -Type SOA -ErrorAction Stop
            $results += "✓ alpine.lab resolves"
          } catch {
            $results += "✗ alpine.lab failed"
          }
          
          # Test child domains
          try {
            $resolve = Resolve-DnsName "mauna.alpine.lab" -Type SOA -ErrorAction Stop
            $results += "✓ mauna.alpine.lab resolves"
          } catch {
            $results += "✗ mauna.alpine.lab failed"
          }
          
          try {
            $resolve = Resolve-DnsName "rainier.alpine.lab" -Type SOA -ErrorAction Stop
            $results += "✓ rainier.alpine.lab resolves"
          } catch {
            $results += "✗ rainier.alpine.lab failed"
          }
          
          $results | ForEach-Object { Write-Output $_ }
      register: dns_test_result
      failed_when: false

    - name: Display DNS test results
      debug:
        msg: "{{ dns_test_result.output }}"
      when: dns_test_result.output is defined

- name: DNS Configuration Summary
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Display completion
      debug:
        msg: "DNS configuration complete on all domain controllers"
