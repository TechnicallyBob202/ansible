---
- name: Promote Domain Controllers
  hosts: domain_controllers
  gather_facts: no

  vars_files:
    - vars/domain_config.yml
    - vars/credentials.yml

  tasks:
    - name: Ensure microsoft.ad collection is available
      ansible.builtin.debug:
        msg: "Using microsoft.ad collection for domain operations"

    # Forest Root DC Promotion
    - name: Promote to forest root domain controller
      microsoft.ad.domain:
        dns_domain_name: "{{ forest_root.domain_name }}"
        domain_netbios_name: "{{ forest_root.netbios_name }}"
        safe_mode_password: "{{ dsrm_password }}"
        create_dns_delegation: no
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      when: inventory_hostname in groups['forest_root_dc']
      register: forest_promotion

    - name: Wait for forest root DC to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when:
        - inventory_hostname in groups['forest_root_dc']
        - forest_promotion.changed

    - name: Wait for Active Directory Web Services
      ansible.windows.win_service:
        name: ADWS
        state: started
      retries: 10
      delay: 30
      register: adws_service
      until: adws_service is succeeded
      when: inventory_hostname in groups['forest_root_dc']

    # Additional Domain Controllers in Forest Root
    - name: Promote additional DCs in forest root domain
      microsoft.ad.domain_controller:
        dns_domain_name: "{{ forest_root.domain_name }}"
        domain_admin_user: "{{ forest_root.netbios_name }}\\Administrator"
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ dsrm_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      when:
        - inventory_hostname in groups['forest_root_additional_dcs']
      register: additional_dc_promotion

    - name: Wait for additional DCs to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when:
        - inventory_hostname in groups['forest_root_additional_dcs']
        - additional_dc_promotion.changed

    # Child Domain Promotion
    - name: Promote to child domain controllers
      microsoft.ad.domain:
        dns_domain_name: "{{ item.domain_name }}"
        parent_domain_name: "{{ item.parent }}"
        domain_netbios_name: "{{ item.netbios_name }}"
        safe_mode_password: "{{ dsrm_password }}"
        domain_admin_user: "{{ forest_root.netbios_name }}\\Administrator"
        domain_admin_password: "{{ windows_password }}"
        create_dns_delegation: yes
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      loop: "{{ child_domains }}"
      when:
        - inventory_hostname in groups['child_domain_dcs']
        - item.dc_hostname == inventory_hostname
      register: child_promotion

    - name: Wait for child DCs to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when:
        - inventory_hostname in groups['child_domain_dcs']
        - child_promotion.changed

    - name: Wait for Active Directory Web Services on child DCs
      ansible.windows.win_service:
        name: ADWS
        state: started
      retries: 10
      delay: 30
      register: adws_service_child
      until: adws_service_child is succeeded
      when: inventory_hostname in groups['child_domain_dcs']

    # Verification
    - name: Verify domain controller promotion
      ansible.windows.win_powershell:
        script: |
          $DCInfo = Get-ADDomainController
          [PSCustomObject]@{
            Hostname = $DCInfo.HostName
            Domain = $DCInfo.Domain
            Forest = $DCInfo.Forest
            IsGlobalCatalog = $DCInfo.IsGlobalCatalog
            OperatingSystem = $DCInfo.OperatingSystem
            IPv4Address = $DCInfo.IPv4Address
          }
      register: dc_verification

    - name: Display DC information
      ansible.builtin.debug:
        var: dc_verification.output

    # Post-promotion configuration
    - name: Configure DNS forwarders on forest root
      ansible.windows.win_powershell:
        script: |
          Set-DnsServerForwarder -IPAddress "8.8.8.8","8.8.4.4"
      when: inventory_hostname in groups['forest_root_dc']

    - name: Create reverse lookup zones
      ansible.windows.win_powershell:
        script: |
          $NetworkId = "{{ item.network_id }}"
          $ZoneName = "$($NetworkId.Split('.')[2]).$($NetworkId.Split('.')[1]).$($NetworkId.Split('.')[0]).in-addr.arpa"

          if (-not (Get-DnsServerZone -Name $ZoneName -ErrorAction SilentlyContinue)) {
            Add-DnsServerPrimaryZone -NetworkId "$NetworkId/24" -ReplicationScope Forest
            Write-Output "Created reverse lookup zone: $ZoneName"
          } else {
            Write-Output "Reverse lookup zone already exists: $ZoneName"
          }
      loop: "{{ reverse_lookup_zones | default([]) }}"
      when: inventory_hostname in groups['forest_root_dc']

    - name: Configure AD sites and subnets
      ansible.windows.win_powershell:
        script: |
          # This will be populated based on your site topology
          # Example:
          # New-ADReplicationSite -Name "Site2"
          # New-ADReplicationSubnet -Name "192.168.2.0/24" -Site "Site2"
          Write-Output "Site configuration placeholder - customize based on your topology"
      when: inventory_hostname in groups['forest_root_dc']

    - name: Create organizational units structure
      ansible.windows.win_powershell:
        script: |
          $OUs = @(
            "OU=Servers,{{ forest_root.distinguished_name }}",
            "OU=Workstations,{{ forest_root.distinguished_name }}",
            "OU=Users,{{ forest_root.distinguished_name }}",
            "OU=Groups,{{ forest_root.distinguished_name }}",
            "OU=Service Accounts,{{ forest_root.distinguished_name }}"
          )

          foreach ($OU in $OUs) {
            if (-not (Get-ADOrganizationalUnit -Filter "DistinguishedName -eq '$OU'" -ErrorAction SilentlyContinue)) {
              New-ADOrganizationalUnit -Name $OU.Split(',')[0].Replace('OU=','') -Path ($OU.Split(',',2)[1])
              Write-Output "Created OU: $OU"
            } else {
              Write-Output "OU already exists: $OU"
            }
          }
      when: inventory_hostname in groups['forest_root_dc']

    - name: Set domain functional level
      ansible.windows.win_powershell:
        script: |
          $domain = Get-ADDomain
          $forest = Get-ADForest

          # Set to Windows Server 2016 functional level (WinThreshold)
          if ($domain.DomainMode -lt 'Windows2016Domain') {
            Set-ADDomainMode -Identity $domain.DNSRoot -DomainMode Windows2016Domain -Force
            Write-Output "Domain functional level upgraded"
          }

          if ($forest.ForestMode -lt 'Windows2016Forest') {
            Set-ADForestMode -Identity $forest.Name -ForestMode Windows2016Forest -Force
            Write-Output "Forest functional level upgraded"
          }
      when: inventory_hostname in groups['forest_root_dc']

    - name: Enable AD Recycle Bin
      ansible.windows.win_powershell:
        script: |
          $forest = Get-ADForest
          if (-not $forest.RecycleBinEnabled) {
            Enable-ADOptionalFeature -Identity 'Recycle Bin Feature' -Scope ForestOrConfigurationSet -Target $forest.Name -Confirm:$false
            Write-Output "AD Recycle Bin enabled"
          } else {
            Write-Output "AD Recycle Bin already enabled"
          }
      when: inventory_hostname in groups['forest_root_dc']

    - name: Configure time synchronization
      ansible.windows.win_powershell:
        script: |
          # Configure PDC Emulator to sync with external source
          $PDC = Get-ADDomainController -Discover -Service PrimaryDC
          if ($env:COMPUTERNAME -eq $PDC.HostName.Split('.')[0]) {
            w32tm /config /manualpeerlist:"time.windows.com,0x8" /syncfromflags:manual /reliable:yes /update
            Restart-Service w32time
            w32tm /resync /force
            Write-Output "PDC time sync configured"
          } else {
            # Other DCs sync with domain hierarchy
            w32tm /config /syncfromflags:domhier /update
            Restart-Service w32time
            Write-Output "DC time sync configured"
          }
      register: time_sync

    - name: Create domain admin accounts
      microsoft.ad.user:
        name: "{{ item.username }}"
        firstname: "{{ item.firstname }}"
        surname: "{{ item.surname }}"
        password: "{{ item.password }}"
        state: present
        enabled: yes
        groups:
          - Domain Admins
          - Enterprise Admins
        path: "OU=Users,{{ forest_root.distinguished_name }}"
      loop: "{{ domain_admins | default([]) }}"
      when:
        - inventory_hostname in groups['forest_root_dc']
        - domain_admins is defined
      no_log: yes

    - name: Display completion summary
      ansible.builtin.debug:
        msg: |
          ========================================
          DC Promotion Complete!
          ========================================
          Forest: {{ forest_root.domain_name }}
          DC: {{ inventory_hostname }}
          Domain: {{ dc_verification.output[0].Domain }}
          Forest: {{ dc_verification.output[0].Forest }}
          Global Catalog: {{ dc_verification.output[0].IsGlobalCatalog }}
          ========================================