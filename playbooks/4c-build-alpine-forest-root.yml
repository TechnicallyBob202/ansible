---
- name: Build alpine.lab Forest Root Domain
  hosts: alpine_forest_root_pdc
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if domain already exists
      ansible.windows.win_powershell:
        script: |
          try {
            $domain = Get-ADDomain -Identity "alpine.lab" -ErrorAction Stop
            Write-Output "EXISTS"
            Write-Output $domain.DomainSID.Value
          } catch {
            Write-Output "NOT_EXISTS"
          }
      register: domain_check
      failed_when: false
      changed_when: false

    - name: Set domain status facts
      set_fact:
        alpine_domain_exists: "{{ 'EXISTS' in domain_check.output[0] if domain_check.output is defined and domain_check.output | length > 0 else false }}"
        alpine_domain_sid: "{{ domain_check.output[1] if domain_check.output is defined and domain_check.output | length > 1 else '' }}"
      delegate_to: localhost
      delegate_facts: yes

    - name: Display domain status
      debug:
        msg: "alpine.lab domain {{ 'already exists' if hostvars['localhost']['alpine_domain_exists'] else 'does not exist - will create' }}"

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
      when: not hostvars['localhost']['alpine_domain_exists']
      register: ad_install

    - name: Promote to forest root PDC
      microsoft.ad.domain:
        dns_domain_name: alpine.lab
        domain_netbios_name: ALPINE
        safe_mode_password: "{{ windows_password }}"
        create_dns_delegation: no
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      when: not hostvars['localhost']['alpine_domain_exists']
      register: domain_promotion

    - name: Wait for PDC to come back after reboot
      wait_for_connection:
        timeout: 600
        delay: 30
      when: not hostvars['localhost']['alpine_domain_exists']

    - name: Verify domain promotion
      ansible.windows.win_powershell:
        script: |
          $domain = Get-ADDomain -Identity "alpine.lab"
          Write-Output "Domain: $($domain.DNSRoot)"
          Write-Output "NetBIOS: $($domain.NetBIOSName)"
          Write-Output "SID: $($domain.DomainSID.Value)"
      register: verify_domain
      when: not hostvars['localhost']['alpine_domain_exists']

    - name: Display verification results
      debug:
        msg: "{{ verify_domain.output }}"
      when:
        - not hostvars['localhost']['alpine_domain_exists']
        - verify_domain.output is defined

    - name: Get domain SID after creation
      ansible.windows.win_powershell:
        script: |
          $domain = Get-ADDomain -Identity "alpine.lab"
          Write-Output $domain.DomainSID.Value
      register: new_domain_sid
      when: not hostvars['localhost']['alpine_domain_exists']

    - name: Update domain SID fact
      set_fact:
        alpine_domain_sid: "{{ new_domain_sid.output[0] }}"
      delegate_to: localhost
      delegate_facts: yes
      when:
        - not hostvars['localhost']['alpine_domain_exists']
        - new_domain_sid.output is defined
        - new_domain_sid.output | length > 0

- name: Add alpine.lab Replica DC
  hosts: alpine_forest_root_replica
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          if ($CS.DomainRole -ge 4) {
            Write-Output "IS_DC"
          } else {
            Write-Output "NOT_DC"
          }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Set DC status
      set_fact:
        is_already_dc: "{{ 'IS_DC' in dc_check.output[0] if dc_check.output is defined and dc_check.output | length > 0 else false }}"

    - name: Display DC status
      debug:
        msg: "{{ inventory_hostname }} {{ 'is already a DC' if is_already_dc else 'is not a DC - will promote' }}"

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
      when: not is_already_dc
      register: ad_install

    - name: Promote to replica DC
      microsoft.ad.domain_controller:
        dns_domain_name: alpine.lab
        domain_admin_user: ALPINE\Administrator
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ windows_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        state: domain_controller
        reboot: yes
      when: not is_already_dc
      register: dc_promotion

    - name: Wait for replica to come back after reboot
      wait_for_connection:
        timeout: 600
        delay: 30
      when: not is_already_dc

    - name: Verify DC promotion
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          Write-Output "Hostname: $($CS.Name)"
          Write-Output "Domain: $($CS.Domain)"
          Write-Output "Role: $($CS.DomainRole)"

          $DC = Get-ADDomainController -Identity $env:COMPUTERNAME
          Write-Output "Site: $($DC.Site)"
          Write-Output "IsGC: $($DC.IsGlobalCatalog)"
      register: verify_dc
      when: not is_already_dc

    - name: Display verification results
      debug:
        msg: "{{ verify_dc.output }}"
      when:
        - not is_already_dc
        - verify_dc.output is defined

- name: Save alpine.lab Domain SID
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Create domain SIDs file
      copy:
        content: |
          # alpine.lab Domain SID
          # Generated: {{ ansible_date_time.iso8601 }}

          alpine.lab={{ hostvars['localhost']['alpine_domain_sid'] }}
        dest: "{{ playbook_dir }}/../files/alpine-domain-sid.txt"
      when: hostvars['localhost']['alpine_domain_sid'] is defined

    - name: Display completion
      debug:
        msg: "alpine.lab forest build complete. Domain SID: {{ hostvars['localhost']['alpine_domain_sid'] }}"