---
- name: Post-DC Configuration and AD Setup
  hosts: domain_controllers
  gather_facts: yes

  vars_files:
    - vars/domain_config.yml
    - vars/credentials.yml

  tasks:
    # ========================================
    # DNS Configuration
    # ========================================
    - name: Configure DNS settings
      block:
        - name: Set DNS forwarders on all DCs
          ansible.windows.win_powershell:
            script: |
              $Forwarders = @("8.8.8.8", "8.8.4.4", "1.1.1.1")
              Set-DnsServerForwarder -IPAddress $Forwarders -PassThru
              Write-Output "DNS forwarders configured: $($Forwarders -join ', ')"
          register: dns_forwarders

        - name: Enable DNS scavenging on all zones
          ansible.windows.win_powershell:
            script: |
              # Enable scavenging on the server
              Set-DnsServerScavenging -ScavengingState $true -ScavengingInterval 7.00:00:00 -ApplyOnAllZones

              # Enable on AD-integrated zones
              Get-DnsServerZone | Where-Object { $_.ZoneType -eq 'Primary' -and $_.IsDsIntegrated } | ForEach-Object {
                Set-DnsServerZoneAging -Name $_.ZoneName -Aging $true -ScavengeServers $env:COMPUTERNAME
                Write-Output "Scavenging enabled on zone: $($_.ZoneName)"
              }

        - name: Create conditional forwarders for child domains
          ansible.windows.win_powershell:
            script: |
              $ChildDomains = {{ child_domains | default([]) | to_json }}

              foreach ($Domain in $ChildDomains) {
                $ZoneName = $Domain.domain_name
                $MasterServers = $Domain.dns_servers

                if (-not (Get-DnsServerZone -Name $ZoneName -ErrorAction SilentlyContinue)) {
                  Add-DnsServerConditionalForwarderZone -Name $ZoneName -MasterServers $MasterServers -ReplicationScope Forest
                  Write-Output "Created conditional forwarder for: $ZoneName"
                } else {
                  Write-Output "Conditional forwarder already exists: $ZoneName"
                }
              }
          when:
            - inventory_hostname in groups['forest_root_dc']
            - child_domains is defined

      when: inventory_hostname in groups['forest_root_dc']

    # ========================================
    # AD Sites and Services Configuration
    # ========================================
    - name: Configure AD Sites and Subnets
      block:
        - name: Create AD sites
          ansible.windows.win_powershell:
            script: |
              $Sites = {{ ad_sites | default([]) | to_json }}

              foreach ($Site in $Sites) {
                if (-not (Get-ADReplicationSite -Filter "Name -eq '$($Site.name)'" -ErrorAction SilentlyContinue)) {
                  New-ADReplicationSite -Name $Site.name -Description $Site.description
                  Write-Output "Created site: $($Site.name)"
                } else {
                  Write-Output "Site already exists: $($Site.name)"
                }
              }
          when: ad_sites is defined

        - name: Create AD subnets
          ansible.windows.win_powershell:
            script: |
              $Subnets = {{ ad_subnets | default([]) | to_json }}

              foreach ($Subnet in $Subnets) {
                $SubnetName = $Subnet.network
                $SiteName = $Subnet.site

                if (-not (Get-ADReplicationSubnet -Filter "Name -eq '$SubnetName'" -ErrorAction SilentlyContinue)) {
                  New-ADReplicationSubnet -Name $SubnetName -Site $SiteName -Location $Subnet.location
                  Write-Output "Created subnet: $SubnetName in site: $SiteName"
                } else {
                  Write-Output "Subnet already exists: $SubnetName"
                }
              }
          when: ad_subnets is defined

        - name: Create site links
          ansible.windows.win_powershell:
            script: |
              $SiteLinks = {{ ad_site_links | default([]) | to_json }}

              foreach ($Link in $SiteLinks) {
                if (-not (Get-ADReplicationSiteLink -Filter "Name -eq '$($Link.name)'" -ErrorAction SilentlyContinue)) {
                  New-ADReplicationSiteLink -Name $Link.name -SitesIncluded $Link.sites -Cost $Link.cost -ReplicationFrequencyInMinutes $Link.replication_frequency
                  Write-Output "Created site link: $($Link.name)"
                } else {
                  Write-Output "Site link already exists: $($Link.name)"
                }
              }
          when: ad_site_links is defined

        - name: Move DCs to appropriate sites
          ansible.windows.win_powershell:
            script: |
              $DCInfo = Get-ADDomainController -Identity $env:COMPUTERNAME
              $TargetSite = "{{ ad_site_assignment | default('Default-First-Site-Name') }}"

              if ($DCInfo.Site -ne $TargetSite) {
                Move-ADDirectoryServer -Identity $env:COMPUTERNAME -Site $TargetSite
                Write-Output "Moved DC to site: $TargetSite"
              } else {
                Write-Output "DC already in correct site: $TargetSite"
              }

      when:
        - inventory_hostname in groups['forest_root_dc']
        - ad_sites is defined or ad_subnets is defined

    # ========================================
    # OU Structure Creation
    # ========================================
    - name: Create Organizational Unit structure
      block:
        - name: Create top-level OUs
          microsoft.ad.ou:
            name: "{{ item.name }}"
            path: "{{ item.path | default(forest_root.distinguished_name) }}"
            description: "{{ item.description | default('') }}"
            state: present
            protected: yes
          loop: "{{ organizational_units | default([]) }}"
          when: organizational_units is defined

        - name: Create nested OUs
          microsoft.ad.ou:
            name: "{{ item.name }}"
            path: "{{ item.path }}"
            description: "{{ item.description | default('') }}"
            state: present
            protected: yes
          loop: "{{ nested_ous | default([]) }}"
          when: nested_ous is defined

      when: inventory_hostname in groups['forest_root_dc']

    # ========================================
    # Group Policy Configuration
    # ========================================
    - name: Configure Group Policies
      block:
        - name: Create custom GPOs
          ansible.windows.win_powershell:
            script: |
              Import-Module GroupPolicy

              $GPOs = {{ custom_gpos | default([]) | to_json }}

              foreach ($GPO in $GPOs) {
                if (-not (Get-GPO -Name $GPO.name -ErrorAction SilentlyContinue)) {
                  $NewGPO = New-GPO -Name $GPO.name -Comment $GPO.description

                  # Link to OU if specified
                  if ($GPO.link_to) {
                    New-GPLink -Name $GPO.name -Target $GPO.link_to -LinkEnabled Yes
                    Write-Output "Created and linked GPO: $($GPO.name) to $($GPO.link_to)"
                  } else {
                    Write-Output "Created GPO: $($GPO.name)"
                  }
                } else {
                  Write-Output "GPO already exists: $($GPO.name)"
                }
              }
          when: custom_gpos is defined

        - name: Configure Default Domain Policy
          ansible.windows.win_powershell:
            script: |
              Import-Module GroupPolicy

              # Password Policy
              Set-ADDefaultDomainPasswordPolicy -Identity {{ forest_root.domain_name }} `
                -MinPasswordLength 14 `
                -ComplexityEnabled $true `
                -MaxPasswordAge (New-TimeSpan -Days 90) `
                -MinPasswordAge (New-TimeSpan -Days 1) `
                -PasswordHistoryCount 24 `
                -LockoutThreshold 5 `
                -LockoutDuration (New-TimeSpan -Minutes 30) `
                -LockoutObservationWindow (New-TimeSpan -Minutes 30)

              Write-Output "Default Domain Password Policy configured"

        - name: Configure audit policies
          ansible.windows.win_powershell:
            script: |
              # Enable advanced audit policies
              auditpol /set /category:"Account Logon" /success:enable /failure:enable
              auditpol /set /category:"Account Management" /success:enable /failure:enable
              auditpol /set /category:"Directory Service Access" /success:enable /failure:enable
              auditpol /set /category:"Logon/Logoff" /success:enable /failure:enable
              auditpol /set /category:"Policy Change" /success:enable /failure:enable
              auditpol /set /category:"Privilege Use" /success:enable /failure:enable
              auditpol /set /category:"System" /success:enable /failure:enable

              Write-Output "Audit policies configured"

      when: inventory_hostname in groups['forest_root_dc']

    # ========================================
    # Security Configuration
    # ========================================
    - name: Configure AD security settings
      block:
        - name: Enable fine-grained password policies
          ansible.windows.win_powershell:
            script: |
              $PSOs = {{ password_settings_objects | default([]) | to_json }}

              foreach ($PSO in $PSOs) {
                if (-not (Get-ADFineGrainedPasswordPolicy -Filter "Name -eq '$($PSO.name)'" -ErrorAction SilentlyContinue)) {
                  New-ADFineGrainedPasswordPolicy `
                    -Name $PSO.name `
                    -Precedence $PSO.precedence `
                    -MinPasswordLength $PSO.min_password_length `
                    -ComplexityEnabled $true `
                    -MaxPasswordAge (New-TimeSpan -Days $PSO.max_password_age) `
                    -MinPasswordAge (New-TimeSpan -Days 1) `
                    -PasswordHistoryCount 24 `
                    -LockoutThreshold $PSO.lockout_threshold `
                    -LockoutDuration (New-TimeSpan -Minutes 30) `
                    -LockoutObservationWindow (New-TimeSpan -Minutes 30)

                  # Apply to groups
                  Add-ADFineGrainedPasswordPolicySubject -Identity $PSO.name -Subjects $PSO.apply_to_groups

                  Write-Output "Created PSO: $($PSO.name)"
                } else {
                  Write-Output "PSO already exists: $($PSO.name)"
                }
              }
          when: password_settings_objects is defined

        - name: Configure Kerberos settings
          ansible.windows.win_powershell:
            script: |
              # Set Kerberos policy in Default Domain Policy
              $GPO = Get-GPO -Name "Default Domain Policy"

              # Maximum Kerberos ticket lifetime (10 hours)
              Set-GPRegistryValue -Name "Default Domain Policy" -Key "HKLM\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters" -ValueName "MaxTicketAge" -Type DWord -Value 10

              # Maximum renewal age (7 days)
              Set-GPRegistryValue -Name "Default Domain Policy" -Key "HKLM\System\CurrentControlSet\Control\Lsa\Kerberos\Parameters" -ValueName "MaxRenewAge" -Type DWord -Value 7

              Write-Output "Kerberos policies configured"

        - name: Disable SMBv1 on all DCs
          ansible.windows.win_powershell:
            script: |
              # Disable SMBv1
              Set-SmbServerConfiguration -EnableSMB1Protocol $false -Force

              # Remove SMBv1 feature
              Disable-WindowsOptionalFeature -Online -FeatureName SMB1Protocol -NoRestart

              Write-Output "SMBv1 disabled"

        - name: Configure LDAP signing and channel binding
          ansible.windows.win_powershell:
            script: |
              # Require LDAP signing
              Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\NTDS\Parameters" -Name "LDAPServerIntegrity" -Value 2 -Type DWord

              # Enable LDAP channel binding
              Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\NTDS\Parameters" -Name "LdapEnforceChannelBinding" -Value 2 -Type DWord

              Write-Output "LDAP signing and channel binding configured"
          register: ldap_config
          notify: Restart NTDS

      when: inventory_hostname in groups['domain_controllers']

    # ========================================
    # Service Accounts and Groups
    # ========================================
    - name: Create service accounts and groups
      block:
        - name: Create domain admin service accounts
          microsoft.ad.user:
            name: "{{ item.username }}"
            firstname: "{{ item.firstname | default(item.username) }}"
            surname: "Service Account"
            sam_account_name: "{{ item.username }}"
            user_principal_name: "{{ item.username }}@{{ forest_root.domain_name }}"
            password: "{{ item.password }}"
            state: present
            enabled: yes
            password_never_expires: yes
            cannot_change_password: yes
            path: "OU=Service Accounts,{{ forest_root.distinguished_name }}"
            description: "{{ item.description }}"
          loop: "{{ service_accounts | default([]) }}"
          when: service_accounts is defined
          no_log: yes

        - name: Create custom security groups
          microsoft.ad.group:
            name: "{{ item.name }}"
            scope: "{{ item.scope | default('global') }}"
            category: security
            path: "OU=Groups,{{ forest_root.distinguished_name }}"
            description: "{{ item.description }}"
            state: present
          loop: "{{ security_groups | default([]) }}"
          when: security_groups is defined

        - name: Add members to security groups
          microsoft.ad.group:
            name: "{{ item.0.name }}"
            members:
              add: "{{ item.1 }}"
          loop: "{{ security_groups | default([]) | subelements('members', skip_missing=True) }}"
          when: security_groups is defined

      when: inventory_hostname in groups['forest_root_dc']

    # ========================================
    # Backup Configuration
    # ========================================
    - name: Configure Windows Server Backup
      block:
        - name: Install Windows Server Backup feature
          ansible.windows.win_feature:
            name: Windows-Server-Backup
            state: present

        - name: Create backup policy
          ansible.windows.win_powershell:
            script: |
              $Policy = New-WBPolicy

              # Add system state to backup
              Add-WBSystemState -Policy $Policy

              # Add bare metal recovery
              Add-WBBareMetalRecovery -Policy $Policy

              # Set backup target (modify path as needed)
              $BackupLocation = New-WBBackupTarget -VolumePath "{{ backup_location | default('E:') }}"
              Add-WBBackupTarget -Policy $Policy -Target $BackupLocation

              # Set backup schedule (daily at 2 AM)
              Set-WBSchedule -Policy $Policy -Schedule 02:00

              # Apply the policy
              Set-WBPolicy -Policy $Policy

              Write-Output "Backup policy configured"
          when: configure_backup | default(false)

      when: inventory_hostname in groups['domain_controllers']

    # ========================================
    # Monitoring and Health Checks
    # ========================================
    - name: Configure AD monitoring
      block:
        - name: Check AD replication status
          ansible.windows.win_powershell:
            script: |
              $Results = repadmin /replsummary
              Write-Output $Results
          register: replication_status

        - name: Check SYSVOL replication
          ansible.windows.win_powershell:
            script: |
              $DfsrInfo = Get-DfsrBacklog -SourceComputerName $env:COMPUTERNAME -DestinationComputerName (Get-ADDomainController -Filter * | Where-Object {$_.Name -ne $env:COMPUTERNAME} | Select-Object -First 1 -ExpandProperty Name) -GroupName "Domain System Volume" -FolderName "SYSVOL Share" -ErrorAction SilentlyContinue

              if ($DfsrInfo) {
                Write-Output "SYSVOL backlog: $($DfsrInfo.Count) files"
              } else {
                Write-Output "SYSVOL replication healthy or no other DCs available"
              }
          register: sysvol_status

        - name: Run DCDiag
          ansible.windows.win_powershell:
            script: |
              dcdiag /v | Select-String -Pattern "passed|failed"
          register: dcdiag_results

      when: inventory_hostname in groups['domain_controllers']

    # ========================================
    # Final Verification
    # ========================================
    - name: Display configuration summary
      ansible.builtin.debug:
        msg: |
          ========================================
          Post-DC Configuration Complete!
          ========================================
          DC: {{ inventory_hostname }}
          Domain: {{ ansible_domain }}
          DNS Forwarders: Configured
          AD Sites: {{ 'Configured' if ad_sites is defined else 'Skipped' }}
          OUs: {{ 'Created' if organizational_units is defined else 'Skipped' }}
          GPOs: {{ 'Configured' if custom_gpos is defined else 'Skipped' }}
          Security: Enhanced
          Backup: {{ 'Configured' if configure_backup | default(false) else 'Skipped' }}
          ========================================

  handlers:
    - name: Restart NTDS
      ansible.windows.win_service:
        name: NTDS
        state: restarted