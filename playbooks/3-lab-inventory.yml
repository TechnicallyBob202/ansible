---
- name: Validate VMs and Generate Lab Inventory
  hosts: localhost
  gather_facts: yes

  vars:
    windows_password: "Lyons123!"

    lab_design:
      infrastructure:
        - { hostname: "ATLAS", ip: "192.168.35.10", role: "ADFR Management" }
        - { hostname: "SUMMIT", ip: "192.168.35.11", role: "DSP Management" }
        - { hostname: "PEAK", ip: "192.168.35.12", role: "SQL Server" }
        - { hostname: "RIDGE", ip: "192.168.35.13", role: "Primary DP" }
        - { hostname: "CREST", ip: "192.168.35.14", role: "Secondary DP" }

      jump_servers:
        - { hostname: "SLOPE", ip: "192.168.35.19", role: "Admin Workstation" }

      arbor_forest:
        - { hostname: "KOA-DC", ip: "192.168.35.20", domain: "arbor.lab", role: "Forest Root PDC" }
        - { hostname: "OAK-DC", ip: "192.168.35.21", domain: "arbor.lab", role: "Forest Root Replica" }

      alpine_forest:
        - { hostname: "GRANITE-DC", ip: "192.168.35.30", domain: "alpine.lab", role: "Forest Root PDC" }
        - { hostname: "BASALT-DC", ip: "192.168.35.31", domain: "alpine.lab", role: "Forest Root Replica" }
        - { hostname: "SLATE-DC", ip: "192.168.35.32", domain: "mauna.alpine.lab", role: "Child Domain PDC" }
        - { hostname: "SHALE-DC", ip: "192.168.35.33", domain: "mauna.alpine.lab", role: "Child Domain Replica" }
        - { hostname: "MARBLE-DC", ip: "192.168.35.34", domain: "rainier.alpine.lab", role: "Child Domain PDC" }
        - { hostname: "QUARTZ-DC", ip: "192.168.35.35", domain: "rainier.alpine.lab", role: "Child Domain Replica" }

      recovery_vms:
        - { hostname: "MESA", ip: "192.168.35.50", role: "Recovery VM" }
        - { hostname: "BLUFF", ip: "192.168.35.51", role: "Recovery VM" }

  tasks:
    - name: Build expected VMs list
      set_fact:
        expected_vms: >-
          {{ lab_design.infrastructure +
             lab_design.jump_servers +
             lab_design.arbor_forest +
             lab_design.alpine_forest +
             lab_design.recovery_vms }}

    - name: Test connectivity
      wait_for:
        host: "{{ item.ip }}"
        port: 5985
        timeout: 5
      loop: "{{ expected_vms }}"
      register: connectivity_test
      ignore_errors: yes

    - name: Analyze results
      set_fact:
        online_vms: "{{ connectivity_test.results | selectattr('failed', 'undefined') | map(attribute='item') | list }}"
        offline_vms: "{{ connectivity_test.results | selectattr('failed', 'defined') | selectattr('failed', 'equalto', true) | map(attribute='item') | list }}"

    - name: Display validation
      debug:
        msg: "Online: {{ online_vms | length }}/{{ expected_vms | length }} VMs"

    - name: Fail if VMs offline
      fail:
        msg: "{{ offline_vms | length }} VMs offline"
      when: offline_vms | length > 0

    - name: Generate inventory
      copy:
        content: |
          # ADFR/DSP Lab Inventory
          # Generated: {{ ansible_date_time.iso8601 }}

          [all:vars]
          ansible_user=Administrator
          ansible_password={{ "{{" }} lookup('env', 'WINDOWS_PASSWORD') {{ "}}" }}
          ansible_connection=winrm
          ansible_winrm_transport=ntlm
          ansible_winrm_server_cert_validation=ignore
          ansible_port=5985

          [infrastructure]
          {% for vm in lab_design.infrastructure | sort(attribute='hostname') %}
          {{ vm.hostname }} ansible_host={{ vm.ip }}
          {% endfor %}

          [jump_servers]
          {% for vm in lab_design.jump_servers %}
          {{ vm.hostname }} ansible_host={{ vm.ip }}
          {% endfor %}

          [arbor_forest_root_pdc]
          {% for vm in lab_design.arbor_forest %}
          {% if 'PDC' in vm.role and 'Forest Root' in vm.role %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=arbor.lab netbios_name=ARBOR
          {% endif %}
          {% endfor %}

          [arbor_forest_root_replica]
          {% for vm in lab_design.arbor_forest %}
          {% if 'Replica' in vm.role %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=arbor.lab netbios_name=ARBOR
          {% endif %}
          {% endfor %}

          [alpine_forest_root_pdc]
          {% for vm in lab_design.alpine_forest %}
          {% if 'PDC' in vm.role and 'Forest Root' in vm.role %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=alpine.lab netbios_name=ALPINE
          {% endif %}
          {% endfor %}

          [alpine_forest_root_replica]
          {% for vm in lab_design.alpine_forest %}
          {% if 'Replica' in vm.role and vm.domain == 'alpine.lab' %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=alpine.lab netbios_name=ALPINE
          {% endif %}
          {% endfor %}

          [mauna_child_pdc]
          {% for vm in lab_design.alpine_forest %}
          {% if 'PDC' in vm.role and vm.domain == 'mauna.alpine.lab' %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=mauna.alpine.lab netbios_name=MAUNA parent_domain=alpine.lab
          {% endif %}
          {% endfor %}

          [mauna_child_replica]
          {% for vm in lab_design.alpine_forest %}
          {% if 'Replica' in vm.role and vm.domain == 'mauna.alpine.lab' %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=mauna.alpine.lab netbios_name=MAUNA parent_domain=alpine.lab
          {% endif %}
          {% endfor %}

          [rainier_child_pdc]
          {% for vm in lab_design.alpine_forest %}
          {% if 'PDC' in vm.role and vm.domain == 'rainier.alpine.lab' %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=rainier.alpine.lab netbios_name=RAINIER parent_domain=alpine.lab
          {% endif %}
          {% endfor %}

          [rainier_child_replica]
          {% for vm in lab_design.alpine_forest %}
          {% if 'Replica' in vm.role and vm.domain == 'rainier.alpine.lab' %}
          {{ vm.hostname }} ansible_host={{ vm.ip }} domain_name=rainier.alpine.lab netbios_name=RAINIER parent_domain=alpine.lab
          {% endif %}
          {% endfor %}

          [recovery_vms]
          {% for vm in lab_design.recovery_vms %}
          {{ vm.hostname }} ansible_host={{ vm.ip }}
          {% endfor %}

          [domain_controllers:children]
          arbor_forest_root_pdc
          arbor_forest_root_replica
          alpine_forest_root_pdc
          alpine_forest_root_replica
          mauna_child_pdc
          mauna_child_replica
          rainier_child_pdc
          rainier_child_replica
        dest: "{{ playbook_dir }}/../inventory/adfr-lab"
        mode: '0644'

    - name: Generate mRemoteNG config
      copy:
        content: |
          <?xml version="1.0" encoding="utf-8"?>
          <mrng:Connections xmlns:mrng="http://mremoteng.org" Name="Connections" Export="false" EncryptionEngine="AES" BlockCipherMode="GCM" KdfIterations="1000" FullFileEncryption="false" Protected="QB3UYipBWC6o3m4MioAD9TdMQr0XHZNjj8QaWfw3sM1TxTV+cQADdBYUI4nLdRqwYpEIV4Ts42vlWoyw441J3/3B" ConfVersion="2.6">
              <Node Name="ADFR-DSP Lab" Type="Container" Expanded="true" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999999 | random | to_uuid }}">
                  <Node Name="Infrastructure" Type="Container" Expanded="true" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999998 | random | to_uuid }}">
          {% for vm in lab_design.infrastructure | sort(attribute='hostname') %}
                      <Node Name="{{ vm.hostname }}" Type="Connection" Descr="{{ vm.role }}" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999997 | random | to_uuid }}" Username="Administrator" Domain="" Password="" Hostname="{{ vm.ip }}" Protocol="RDP" Port="3389" />
          {% endfor %}
                  </Node>
                  <Node Name="arbor.lab Forest" Type="Container" Expanded="true" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999996 | random | to_uuid }}">
          {% for vm in lab_design.arbor_forest | sort(attribute='hostname') %}
                      <Node Name="{{ vm.hostname }}" Type="Connection" Descr="{{ vm.role }}" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999995 | random | to_uuid }}" Username="ARBOR\Administrator" Domain="ARBOR" Password="" Hostname="{{ vm.ip }}" Protocol="RDP" Port="3389" />
          {% endfor %}
                  </Node>
                  <Node Name="alpine.lab Forest" Type="Container" Expanded="true" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999994 | random | to_uuid }}">
          {% for vm in lab_design.alpine_forest | sort(attribute='hostname') %}
                      <Node Name="{{ vm.hostname }}" Type="Connection" Descr="{{ vm.role }}" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999993 | random | to_uuid }}" Username="ALPINE\Administrator" Domain="ALPINE" Password="" Hostname="{{ vm.ip }}" Protocol="RDP" Port="3389" />
          {% endfor %}
                  </Node>
                  <Node Name="Admin & Recovery" Type="Container" Expanded="true" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999992 | random | to_uuid }}">
          {% for vm in lab_design.jump_servers + lab_design.recovery_vms | sort(attribute='hostname') %}
                      <Node Name="{{ vm.hostname }}" Type="Connection" Descr="{{ vm.role }}" Icon="mRemoteNG" Panel="General" Id="{{ 999999999999991 | random | to_uuid }}" Username="Administrator" Domain="" Password="" Hostname="{{ vm.ip }}" Protocol="RDP" Port="3389" />
          {% endfor %}
                  </Node>
              </Node>
          </mrng:Connections>
        dest: "{{ playbook_dir }}/../files/adfr-lab-mremoteng.xml"
        mode: '0644'

    - name: Inventory generation complete
      debug:
        msg: "Inventory: inventory/adfr-lab | mRemoteNG: files/adfr-lab-mremoteng.xml"
