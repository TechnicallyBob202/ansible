---
- name: Build Active Directory Forests and Domains
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Display build plan
      debug:
        msg:
          - "Building Active Directory Infrastructure"
          - "  Forest 1: arbor.lab (2 DCs)"
          - "  Forest 2: alpine.lab (6 DCs in 3 domains)"
          - "Total Duration: 30-45 minutes (optimized)"

# =============================================================================
# PHASE 1: Initialize Change Tracking
# =============================================================================
- name: Initialize Change Tracking for All VMs
  hosts: all
  gather_facts: no
  serial: 0
  tasks:
    - name: Initialize vm_changed flag
      set_fact:
        vm_changed: false

# =============================================================================
# PHASE 2: Install AD Features (Only if Missing)
# =============================================================================
- name: Install Active Directory Features
  hosts: domain_controllers
  gather_facts: no
  serial: 0

  tasks:
    - name: Quick check if AD features installed
      ansible.windows.win_shell: |
        $feature = Get-WindowsFeature -Name AD-Domain-Services
        if ($feature.Installed) {
          Write-Output "INSTALLED"
        } else {
          Write-Output "NOT_INSTALLED"
        }
      register: feature_check
      changed_when: false

    - name: Install AD-DS features (only if needed)
      include_role:
        name: activeDirectory
        tasks_from: install_ad_features.yml
      when: "'NOT_INSTALLED' in feature_check.stdout"
      register: features_result

    - name: Mark VM as changed if features were installed
      set_fact:
        vm_changed: "{{ vm_changed or (features_result.changed | default(false)) }}"

    - name: Display feature status
      debug:
        msg: "{{ inventory_hostname }} - AD Features {{ 'installed' if features_result.changed | default(false) else 'already present' }}"

# =============================================================================
# PHASE 3: Configure DNS (Skip if Already Correct)
# =============================================================================
- name: Configure DNS on Domain Controllers
  hosts: domain_controllers
  gather_facts: no
  serial: 0

  tasks:
    - name: Get current DNS settings
      ansible.windows.win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        (Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4).ServerAddresses -join ","
      register: current_dns
      changed_when: false

    - name: Check if DNS needs update
      set_fact:
        dns_needs_update: "{{ windows_dns_servers[0] not in current_dns.stdout }}"

    - name: Set DNS (only if needed)
      include_role:
        name: windows
        tasks_from: set_dns.yml
      when: dns_needs_update
      register: dns_result

    - name: Mark VM as changed if DNS was configured
      set_fact:
        vm_changed: "{{ vm_changed or (dns_result.changed | default(false)) }}"

    - name: Display DNS configuration
      debug:
        msg: "{{ inventory_hostname }} - DNS {{ 'configured' if dns_result.changed | default(false) else 'already correct' }}"

- name: Configure DNS on Infrastructure and Recovery VMs
  hosts: infrastructure:recovery_vms
  gather_facts: no
  serial: 0

  tasks:
    - name: Get current DNS settings
      ansible.windows.win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        (Get-DnsClientServerAddress -InterfaceAlias $adapter.Name -AddressFamily IPv4).ServerAddresses -join ","
      register: current_dns
      changed_when: false

    - name: Check if DNS needs update
      set_fact:
        dns_needs_update: "{{ windows_dns_servers[0] not in current_dns.stdout }}"

    - name: Set DNS (only if needed)
      include_role:
        name: windows
        tasks_from: set_dns.yml
      when: dns_needs_update
      register: dns_result

    - name: Mark VM as changed if DNS was configured
      set_fact:
        vm_changed: "{{ vm_changed or (dns_result.changed | default(false)) }}"

# =============================================================================
# PHASE 4: Promote Forest Root PDCs (Parallel - Different Forests)
# =============================================================================
- name: Promote Forest Root PDCs in Parallel
  hosts: arbor_pdc:alpine_pdc
  gather_facts: no
  serial: 0  # Safe - different forests, can run simultaneously

  tasks:
    - name: Check if already a domain controller
      ansible.windows.win_shell: |
        $DC = Get-WmiObject Win32_ComputerSystem
        if ($DC.DomainRole -ge 4) {
          Write-Output "IS_DC"
        } else {
          Write-Output "NOT_DC"
        }
      register: dc_check
      changed_when: false
      failed_when: false

    - name: Promote to forest root PDC (only if not already DC)
      when: "'NOT_DC' in dc_check.stdout"
      block:
        - name: Promote to forest root PDC
          include_role:
            name: activeDirectory
            tasks_from: promote_forest_root.yml
          register: promotion_result

        - name: Mark VM as changed if promoted
          set_fact:
            vm_changed: "{{ vm_changed or (promotion_result.changed | default(false)) }}"

    - name: Wait for DC to be ready
      include_role:
        name: activeDirectory
        tasks_from: wait_for_dc_ready.yml

    - name: Verify DC health
      ansible.windows.win_shell: |
        $adws = Get-Service ADWS
        $netlogon = Get-Service Netlogon
        $dns = Get-Service DNS

        if ($adws.Status -eq 'Running' -and $netlogon.Status -eq 'Running' -and $dns.Status -eq 'Running') {
          Write-Output "HEALTHY"
        } else {
          Write-Output "UNHEALTHY: ADWS=$($adws.Status) Netlogon=$($netlogon.Status) DNS=$($dns.Status)"
          exit 1
        }
      register: health_check
      changed_when: false
      failed_when: "'UNHEALTHY' in health_check.stdout"

    - name: Check FSMO roles
      include_role:
        name: activeDirectory
        tasks_from: check_fsmo_roles.yml

    - name: Display promotion status
      debug:
        msg: "{{ inventory_hostname }} - {{ 'Promoted' if 'NOT_DC' in dc_check.stdout else 'Already DC' }} and healthy"

# =============================================================================
# PHASE 5: Promote Forest Root Replicas (Parallel)
# =============================================================================
- name: Promote Forest Root Replica DCs
  hosts: arbor_replica:alpine_replica
  gather_facts: no
  serial: 0

  tasks:
    - name: Check if already a domain controller
      ansible.windows.win_shell: |
        $DC = Get-WmiObject Win32_ComputerSystem
        if ($DC.DomainRole -ge 4) {
          Write-Output "IS_DC"
        } else {
          Write-Output "NOT_DC"
        }
      register: dc_check
      changed_when: false
      failed_when: false

    - name: Promote to replica DC (only if not already DC)
      when: "'NOT_DC' in dc_check.stdout"
      block:
        - name: Promote to replica DC
          include_role:
            name: activeDirectory
            tasks_from: promote_replica_dc.yml
          register: promotion_result

        - name: Mark VM as changed if promoted
          set_fact:
            vm_changed: "{{ vm_changed or (promotion_result.changed | default(false)) }}"

    - name: Wait for DC to be ready
      include_role:
        name: activeDirectory
        tasks_from: wait_for_dc_ready.yml

    - name: Verify DC health
      ansible.windows.win_shell: |
        $adws = Get-Service ADWS
        $netlogon = Get-Service Netlogon
        $dns = Get-Service DNS

        if ($adws.Status -eq 'Running' -and $netlogon.Status -eq 'Running' -and $dns.Status -eq 'Running') {
          Write-Output "HEALTHY"
        } else {
          Write-Output "UNHEALTHY: ADWS=$($adws.Status) Netlogon=$($netlogon.Status) DNS=$($dns.Status)"
          exit 1
        }
      register: health_check
      changed_when: false
      failed_when: "'UNHEALTHY' in health_check.stdout"

    - name: Verify replication
      include_role:
        name: activeDirectory
        tasks_from: verify_replication.yml

    - name: Display promotion status
      debug:
        msg: "{{ inventory_hostname }} - {{ 'Promoted' if 'NOT_DC' in dc_check.stdout else 'Already DC' }} and healthy"

# =============================================================================
# PHASE 6: Promote Child Domain PDCs (Parallel - Different Child Domains)
# =============================================================================
- name: Promote Child Domain PDCs
  hosts: alpine_mauna_pdc:alpine_rainier_pdc
  gather_facts: no
  serial: 0  # Safe - different child domains, can run simultaneously

  tasks:
    - name: Check if already a domain controller
      ansible.windows.win_shell: |
        $DC = Get-WmiObject Win32_ComputerSystem
        if ($DC.DomainRole -ge 4) {
          Write-Output "IS_DC"
        } else {
          Write-Output "NOT_DC"
        }
      register: dc_check
      changed_when: false
      failed_when: false

    - name: Promote to child domain PDC (only if not already DC)
      when: "'NOT_DC' in dc_check.stdout"
      block:
        - name: Promote to child domain PDC
          include_role:
            name: activeDirectory
            tasks_from: promote_child_domain.yml
          register: promotion_result

        - name: Mark VM as changed if promoted
          set_fact:
            vm_changed: "{{ vm_changed or (promotion_result.changed | default(false)) }}"

    - name: Wait for DC to be ready
      include_role:
        name: activeDirectory
        tasks_from: wait_for_dc_ready.yml

    - name: Verify DC health
      ansible.windows.win_shell: |
        $adws = Get-Service ADWS
        $netlogon = Get-Service Netlogon
        $dns = Get-Service DNS

        if ($adws.Status -eq 'Running' -and $netlogon.Status -eq 'Running' -and $dns.Status -eq 'Running') {
          Write-Output "HEALTHY"
        } else {
          Write-Output "UNHEALTHY: ADWS=$($adws.Status) Netlogon=$($netlogon.Status) DNS=$($dns.Status)"
          exit 1
        }
      register: health_check
      changed_when: false
      failed_when: "'UNHEALTHY' in health_check.stdout"

    - name: Check FSMO roles
      include_role:
        name: activeDirectory
        tasks_from: check_fsmo_roles.yml

    - name: Display promotion status
      debug:
        msg: "{{ inventory_hostname }} - {{ 'Promoted' if 'NOT_DC' in dc_check.stdout else 'Already DC' }} and healthy"

# =============================================================================
# PHASE 7: Promote Child Domain Replicas (Parallel)
# =============================================================================
- name: Promote Child Domain Replica DCs
  hosts: alpine_mauna_replica:alpine_rainier_replica
  gather_facts: no
  serial: 0

  tasks:
    - name: Check if already a domain controller
      ansible.windows.win_shell: |
        $DC = Get-WmiObject Win32_ComputerSystem
        if ($DC.DomainRole -ge 4) {
          Write-Output "IS_DC"
        } else {
          Write-Output "NOT_DC"
        }
      register: dc_check
      changed_when: false
      failed_when: false

    - name: Promote to replica DC (only if not already DC)
      when: "'NOT_DC' in dc_check.stdout"
      block:
        - name: Promote to replica DC
          include_role:
            name: activeDirectory
            tasks_from: promote_replica_dc.yml
          register: promotion_result

        - name: Mark VM as changed if promoted
          set_fact:
            vm_changed: "{{ vm_changed or (promotion_result.changed | default(false)) }}"

    - name: Wait for DC to be ready
      include_role:
        name: activeDirectory
        tasks_from: wait_for_dc_ready.yml

    - name: Verify DC health
      ansible.windows.win_shell: |
        $adws = Get-Service ADWS
        $netlogon = Get-Service Netlogon
        $dns = Get-Service DNS

        if ($adws.Status -eq 'Running' -and $netlogon.Status -eq 'Running' -and $dns.Status -eq 'Running') {
          Write-Output "HEALTHY"
        } else {
          Write-Output "UNHEALTHY: ADWS=$($adws.Status) Netlogon=$($netlogon.Status) DNS=$($dns.Status)"
          exit 1
        }
      register: health_check
      changed_when: false
      failed_when: "'UNHEALTHY' in health_check.stdout"

    - name: Verify replication
      include_role:
        name: activeDirectory
        tasks_from: verify_replication.yml

    - name: Display promotion status
      debug:
        msg: "{{ inventory_hostname }} - {{ 'Promoted' if 'NOT_DC' in dc_check.stdout else 'Already DC' }} and healthy"

# =============================================================================
# PHASE 8: Create Service Accounts (Only on PDCs, Skip if Exist)
# =============================================================================
- name: Create Service Accounts
  hosts: arbor_pdc:alpine_pdc
  gather_facts: no

  tasks:
    - name: Create ADFR and DSP service accounts
      include_role:
        name: activeDirectory
        tasks_from: create_service_accounts.yml
      register: accounts_result

    - name: Mark VM as changed if accounts were created
      set_fact:
        vm_changed: "{{ vm_changed or (accounts_result.changed | default(false)) }}"

# =============================================================================
# PHASE 9: Populate Domains with Realistic Data
# =============================================================================
- name: Populate arbor.lab Forest
  hosts: arbor_pdc
  gather_facts: no
  tasks:
    - name: Populate arbor.lab with dummy data
      include_role:
        name: activeDirectory_populate
      register: populate_result

    - name: Mark VM as changed if data was populated
      set_fact:
        vm_changed: "{{ vm_changed or (populate_result.changed | default(false)) }}"

- name: Populate alpine.lab Forest Root
  hosts: alpine_pdc
  gather_facts: no
  tasks:
    - name: Populate alpine.lab with dummy data
      include_role:
        name: activeDirectory_populate
      register: populate_result

    - name: Mark VM as changed if data was populated
      set_fact:
        vm_changed: "{{ vm_changed or (populate_result.changed | default(false)) }}"

- name: Populate mauna.alpine.lab Child Domain
  hosts: alpine_mauna_pdc
  gather_facts: no
  tasks:
    - name: Populate mauna.alpine.lab with dummy data
      include_role:
        name: activeDirectory_populate
      register: populate_result

    - name: Mark VM as changed if data was populated
      set_fact:
        vm_changed: "{{ vm_changed or (populate_result.changed | default(false)) }}"

- name: Populate rainier.alpine.lab Child Domain
  hosts: alpine_rainier_pdc
  gather_facts: no
  tasks:
    - name: Populate rainier.alpine.lab with dummy data
      include_role:
        name: activeDirectory_populate
      register: populate_result

    - name: Mark VM as changed if data was populated
      set_fact:
        vm_changed: "{{ vm_changed or (populate_result.changed | default(false)) }}"

# =============================================================================
# PHASE 10: Final Validation - All DCs
# =============================================================================
- name: Final Validation
  hosts: domain_controllers
  gather_facts: no

  tasks:
    - name: Verify all DCs are operational
      include_role:
        name: activeDirectory
        tasks_from: wait_for_dc_ready.yml

    - name: Verify replication health
      include_role:
        name: activeDirectory
        tasks_from: verify_replication.yml

- name: Consolidate Domain Information
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create files directory
      file:
        path: "{{ playbook_dir }}/../files"
        state: directory
        mode: '0755'

    - name: Consolidate domain SIDs
      shell: |
        cat /tmp/domain-sid-*.txt > {{ playbook_dir }}/../files/domain-sids.txt 2>/dev/null || echo "# No domain SID files found"
      changed_when: false

    - name: Consolidate FSMO roles
      shell: |
        cat /tmp/fsmo-roles-*.txt > {{ playbook_dir }}/../files/fsmo-roles.txt 2>/dev/null || echo "# No FSMO files found"
      changed_when: false

    - name: Display completion message
      debug:
        msg:
          - "Active Directory deployment complete!"
          - "  arbor.lab: 2 DCs"
          - "  alpine.lab: 2 DCs"
          - "  mauna.alpine.lab: 2 DCs"
          - "  rainier.alpine.lab: 2 DCs"
          - "Total: 8 Domain Controllers"
          - ""
          - "Domain information saved to files/"
          - "  - domain-sids.txt"
          - "  - fsmo-roles.txt"

# =============================================================================
# PHASE 11: Snapshot Changed VMs
# =============================================================================
- name: Snapshot after AD promotion
  hosts: all
  gather_facts: no
  serial: 2
  tasks:
    - name: Display snapshot plan
      debug:
        msg: "{{ inventory_hostname }} - Will {{ 'CREATE' if (vm_changed | default(false)) else 'SKIP' }} snapshot (changed={{ vm_changed | default(false) }})"

    - name: Take snapshot - only for changed VMs
      include_role:
        name: proxmox
        tasks_from: snapshot.yml
        apply:
          delegate_to: localhost
      vars:
        snapshot_name: post-dcpromo
      when: vm_changed | default(false)

# =============================================================================
# PHASE 12: Final Summary
# =============================================================================
- name: Deployment Summary
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Count changed VMs by type
      set_fact:
        changed_dcs: "{{ groups['domain_controllers'] | map('extract', hostvars, 'vm_changed') | select('equalto', true) | list | length }}"
        total_dcs: "{{ groups['domain_controllers'] | length }}"
        changed_infra: "{{ groups['infrastructure'] | default([]) | map('extract', hostvars, 'vm_changed') | select('equalto', true) | list | length }}"
        total_infra: "{{ groups['infrastructure'] | default([]) | length }}"
        changed_recovery: "{{ groups['recovery_vms'] | default([]) | map('extract', hostvars, 'vm_changed') | select('equalto', true) | list | length }}"
        total_recovery: "{{ groups['recovery_vms'] | default([]) | length }}"

    - name: Calculate totals
      set_fact:
        total_changed: "{{ (changed_dcs | int) + (changed_infra | int) + (changed_recovery | int) }}"
        total_vms: "{{ (total_dcs | int) + (total_infra | int) + (total_recovery | int) }}"

    - name: Display snapshot summary
      debug:
        msg:
          - "========================================="
          - "AD Build Complete!"
          - "========================================="
          - ""
          - "Snapshots Created:"
          - "  Domain Controllers: {{ changed_dcs }}/{{ total_dcs }}"
          - "  Infrastructure VMs: {{ changed_infra }}/{{ total_infra }}"
          - "  Recovery VMs: {{ changed_recovery }}/{{ total_recovery }}"
          - "  ─────────────────────────────────"
          - "  Total: {{ total_changed }}/{{ total_vms }} VMs snapshotted"
          - ""
          - "{{ (total_vms | int) - (total_changed | int) }} VMs were already configured and skipped"