---
- name: Configure Static IPs and Hostnames
  hosts: localhost
  gather_facts: no

  vars:
    # Windows credentials
    windows_user: Administrator
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

    # Proxmox hosts for getting DHCP IPs
    proxmox_host1: 192.168.33.21
    proxmox_host2: 192.168.33.22

    # Network configuration
    gateway: 192.168.35.1
    dns_servers: "192.168.33.6,192.168.33.7"

    # VM configurations (VMID, final IP, hostname, which proxmox host)
    vm_configs:
      - { vmid: 3510, ip: "192.168.35.10", hostname: "ATLAS", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3511, ip: "192.168.35.11", hostname: "SUMMIT", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3512, ip: "192.168.35.12", hostname: "PEAK", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3513, ip: "192.168.35.13", hostname: "RIDGE", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3520, ip: "192.168.35.20", hostname: "KOA-DC01", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3530, ip: "192.168.35.30", hostname: "GRANITE-DC01", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3532, ip: "192.168.35.32", hostname: "SLATE-DC01", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3534, ip: "192.168.35.34", hostname: "MARBLE-DC01", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3550, ip: "192.168.35.50", hostname: "MESA-R01", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3514, ip: "192.168.35.14", hostname: "CREST", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3519, ip: "192.168.35.19", hostname: "SLOPE", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3521, ip: "192.168.35.21", hostname: "OAK-DC01", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3531, ip: "192.168.35.31", hostname: "BASALT-DC01", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3533, ip: "192.168.35.33", hostname: "SHALE-DC01", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3535, ip: "192.168.35.35", hostname: "QUARTZ-DC01", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3551, ip: "192.168.35.51", hostname: "BLUFF-R01", pxhost: "{{ proxmox_host2 }}" }
      - { vmid: 3552, ip: "192.168.35.52", hostname: "CLIFF-R01", pxhost: "{{ proxmox_host2 }}" }

  tasks:
    - name: Check Windows password is set
      assert:
        that:
          - windows_password != ''
        fail_msg: "WINDOWS_PASSWORD environment variable must be set"

    - name: Get DHCP IPs from all VMs
      shell: "ssh root@{{ item.pxhost }} 'qm guest cmd {{ item.vmid }} network-get-interfaces' 2>/dev/null | grep -oP '(?<=\"ip-address\" : \")[^\"]*' | grep -v '^127' | grep -v '^fe80' | grep -v '^::1' | head -1"
      loop: "{{ vm_configs }}"
      register: dhcp_ips
      ignore_errors: yes

    - name: Display discovered DHCP IPs
      debug:
        msg: "{{ item.item.hostname }} (VMID {{ item.item.vmid}}): {{ item.stdout if item.stdout else 'NOT FOUND' }}"
      loop: "{{ dhcp_ips.results }}"

    - name: Create dynamic inventory with DHCP IPs
      add_host:
        name: "{{ item.item.hostname }}"
        groups: windows_vms
        ansible_host: "{{ item.stdout }}"
        ansible_user: "{{ windows_user }}"
        ansible_password: "{{ windows_password }}"
        ansible_connection: winrm
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_port: 5985
        ansible_winrm_scheme: http
        target_ip: "{{ item.item.ip }}"
        target_hostname: "{{ item.item.hostname }}"
      loop: "{{ dhcp_ips.results }}"
      when: item.stdout != ""

    - name: Pause to ensure all VMs are in inventory
      pause:
        seconds: 2

- name: Configure Windows VMs
  hosts: windows_vms
  gather_facts: no
  serial: 1

  tasks:
    - name: Test WinRM connectivity
      win_ping:
      register: ping_result
      ignore_errors: yes

    - name: Skip if WinRM not available
      meta: end_host
      when: ping_result is failed

    - name: Configure static IP address (atomic operation)
      win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        # Remove old IP and add new one in single command to minimize downtime
        Remove-NetIPAddress -InterfaceAlias $adapter.Name -Confirm:$false -ErrorAction SilentlyContinue
        Remove-NetRoute -InterfaceAlias $adapter.Name -Confirm:$false -ErrorAction SilentlyContinue
        New-NetIPAddress -InterfaceAlias $adapter.Name -IPAddress "{{ target_ip }}" -PrefixLength 24 -DefaultGateway 192.168.35.1
      register: ip_result
      async: 45
      poll: 0

    - name: Wait for IP change to complete
      async_status:
        jid: "{{ ip_result.ansible_job_id }}"
      register: ip_job_result
      until: ip_job_result.finished
      retries: 15
      delay: 3
      ignore_errors: yes

    - name: Reconnect with new static IP
      wait_for:
        host: "{{ target_ip }}"
        port: 5985
        delay: 5
        timeout: 60
      delegate_to: localhost

    - name: Update inventory to use static IP
      set_fact:
        ansible_host: "{{ target_ip }}"

    - name: Configure DNS servers
      win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses "192.168.33.6","192.168.33.7"

    - name: Set hostname
      win_hostname:
        name: "{{ target_hostname }}"
      register: hostname_result

    - name: Display configuration result
      debug:
        msg:
          - "{{ target_hostname }}: Configured"
          - "  IP: {{ target_ip }}"
          - "  Hostname: {{ target_hostname }}"
          - "  Reboot required: {{ hostname_result.reboot_required }}"

- name: Reboot VMs that need it
  hosts: windows_vms
  gather_facts: no
  serial: 3

  tasks:
    - name: Reboot if hostname changed
      win_reboot:
        reboot_timeout: 600
      when: hostvars[inventory_hostname].hostname_result.reboot_required | default(false)

- name: Final verification
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Display completion summary
      debug:
        msg:
          - "=========================================="
          - "IP Configuration Complete!"
          - "=========================================="
          - ""
          - "All VMs configured with:"
          - "  - Static IPs on 192.168.35.x"
          - "  - Correct hostnames"
          - "  - DNS: 192.168.33.6, 192.168.33.7"
          - "  - Gateway: 192.168.35.1"
          - ""
          - "Next steps:"
          - "  1. Verify connectivity: ping each IP"
          - "  2. RDP to verify hostnames"
          - "  3. Run DC promotion playbook"
          - "=========================================="