---
- name: Discover DHCP IPs and Configure Static IPs
  hosts: localhost
  gather_facts: no

  vars:
    proxmox_host1: 192.168.33.21
    proxmox_host2: 192.168.33.22

    vm_configs:
      - { vmid: 3501, ip: "192.168.35.10", hostname: "ATLAS", pxhost: "{{ proxmox_host1 }}" }
      - { vmid: 3503, ip: "192.168.35.12", hostname: "PEAK", pxhost: "{{ proxmox_host1 }}" }
      # ... other VMs ...

  tasks:
    - name: Display configuration plan
      debug:
        msg: "Configuring {{ vm_configs | length }} VMs with static IPs"

    - name: Get DHCP IPs from all VMs
      shell: |
        timeout 3 ssh -i /root/.ssh/ansible_key -o ConnectTimeout=2 -o StrictHostKeyChecking=no -o BatchMode=yes root@{{ item.pxhost }} \
        'qm guest cmd {{ item.vmid }} network-get-interfaces' | \
        grep -oP '(?<="ip-address" : ")[^"]*' | \
        grep -v '^127' | grep -v '^fe80' | grep -v '^::1' | head -1 || echo ""
      loop: "{{ vm_configs }}"
      register: dhcp_ips
      ignore_errors: yes
      loop_control:
        label: "{{ item.hostname }}"

    - name: Create dynamic inventory with password
      add_host:
        name: "{{ item.item.hostname }}"
        groups: windows_vms
        ansible_host: "{{ item.stdout }}"
        ansible_user: Administrator
        ansible_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"
        ansible_connection: winrm
        ansible_winrm_transport: basic
        ansible_winrm_server_cert_validation: ignore
        ansible_port: 5985
        target_ip: "{{ item.item.ip }}"
        target_hostname: "{{ item.item.hostname }}"
      loop: "{{ dhcp_ips.results }}"
      when: item.stdout != ""
      loop_control:
        label: "{{ item.item.hostname }}"

# -------------------------------------------------------------------

- name: Configure static IPs
  hosts: windows_vms
  gather_facts: no

  tasks:
    - name: Set static IP
      win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        New-NetIPAddress -InterfaceAlias $adapter.Name -IPAddress "{{ target_ip }}" -PrefixLength 24 -DefaultGateway 192.168.35.1
      async: 10
      poll: 0
      ignore_errors: yes

# -------------------------------------------------------------------

- name: Wait for network changes
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Wait 15 seconds
      pause:
        seconds: 15

# -------------------------------------------------------------------

- name: Configure DNS and hostname
  hosts: windows_vms
  gather_facts: no
  serial: 1

  tasks:
    - name: Test new IP
      wait_for:
        host: "{{ target_ip }}"
        port: 5985
        timeout: 30
      delegate_to: localhost
      ignore_errors: yes
      register: ip_test

    - name: Skip if unreachable
      meta: end_host
      when: ip_test is failed

    - name: Update to static IP
      set_fact:
        ansible_host: "{{ target_ip }}"

    - name: Configure DNS
      win_shell: |
        $adapter = Get-NetAdapter | Where-Object {$_.Status -eq "Up"} | Select-Object -First 1
        Set-DnsClientServerAddress -InterfaceAlias $adapter.Name -ServerAddresses "192.168.35.20","192.168.35.30"

    - name: Set hostname
      win_hostname:
        name: "{{ target_hostname }}"
      register: hostname_result

# -------------------------------------------------------------------

- name: Reboot VMs
  hosts: windows_vms
  gather_facts: no

  tasks:
    - name: Reboot if needed
      win_reboot:
        reboot_timeout: 600
      when: hostvars[inventory_hostname].hostname_result.reboot_required | default(false)
      async: 600
      poll: 0
      register: reboot_job

    - name: Wait for reboots
      async_status:
        jid: "{{ reboot_job.ansible_job_id }}"
      register: reboot_result
      until: reboot_result.finished
      retries: 60
      delay: 10
      when:
        - hostvars[inventory_hostname].hostname_result.reboot_required | default(false)
        - reboot_job.ansible_job_id is defined

# -------------------------------------------------------------------

- name: Summary
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Configuration complete
      debug:
        msg: "IP configuration complete"
