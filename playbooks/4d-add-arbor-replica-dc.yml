---
# ==========================================
# ADD REPLICA DC TO ARBOR.LAB
# Promotes OAK-DC as replica domain controller in arbor.lab
# ==========================================
# Prerequisites: 4b-build-arbor-forest-root.yml completed
# Dependencies: arbor.lab forest must exist
# Can be run: After forest root is built
# Idempotent: Yes - checks if already promoted
# ==========================================

- name: Verify arbor.lab forest exists
  hosts: localhost
  gather_facts: no

  tasks:
    - name: Check for arbor.lab forest status file
      stat:
        path: "{{ playbook_dir }}/../state/arbor-forest-status.yml"
      register: status_file

    - name: Fail if forest not built
      fail:
        msg: |
          arbor.lab forest has not been built yet.
          Please run: ansible-playbook 4b-build-arbor-forest-root.yml
      when: not status_file.stat.exists

    - name: Load forest status
      include_vars:
        file: "{{ playbook_dir }}/../state/arbor-forest-status.yml"
        name: arbor_status
      when: status_file.stat.exists

    - name: Display forest status
      debug:
        msg:
          - "=========================================="
          - "ADDING REPLICA DC TO ARBOR.LAB"
          - "=========================================="
          - "Target: OAK-DC (192.168.35.21)"
          - "Existing PDC: {{ arbor_status.forest_root_pdc }}"
          - "Domain: {{ arbor_status.domain_name }}"

- name: Check if OAK-DC is already a domain controller
  hosts: arbor_forest_root_replica
  gather_facts: no
  
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check current domain role
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          Write-Output "ComputerName: $($CS.Name)"
          Write-Output "Domain: $($CS.Domain)"
          Write-Output "DomainRole: $($CS.DomainRole)"
          Write-Output "PartOfDomain: $($CS.PartOfDomain)"
          
          # DomainRole values:
          # 0 = Standalone Workstation
          # 1 = Member Workstation
          # 2 = Standalone Server
          # 3 = Member Server
          # 4 = Backup Domain Controller
          # 5 = Primary Domain Controller
          
          if ($CS.DomainRole -ge 4) {
            Write-Output "STATUS: Already a Domain Controller"
            exit 0
          } else {
            Write-Output "STATUS: Not a Domain Controller"
            exit 1
          }
      register: dc_status
      failed_when: false
      changed_when: false

    - name: Set replica status fact
      set_fact:
        already_dc: "{{ dc_status.rc == 0 }}"
        current_domain: "{{ dc_status.stdout_lines | select('search', 'Domain:') | first | regex_replace('Domain: ', '') if dc_status.stdout_lines else 'WORKGROUP' }}"

    - name: Display current status
      debug:
        msg:
          - "Current Status:"
          - "{{ dc_status.stdout_lines }}"
          - ""
          - "{{ 'Already promoted - skipping' if already_dc else 'Ready to promote' }}"

    - name: Skip if already a DC
      meta: end_host
      when: already_dc

- name: Promote OAK-DC to replica domain controller
  hosts: arbor_forest_root_replica
  gather_facts: no
  
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Install Active Directory Domain Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      register: adds_install

    - name: Display installation result
      debug:
        msg: "AD-DS feature: {{ 'Installed' if adds_install.changed else 'Already present' }}"

    - name: Test connectivity to existing PDC
      ansible.windows.win_powershell:
        script: |
          $pdc = "192.168.35.20"
          $result = Test-NetConnection -ComputerName $pdc -Port 389 -InformationLevel Quiet
          if ($result) {
            Write-Output "PDC_REACHABLE"
            exit 0
          } else {
            Write-Output "PDC_UNREACHABLE"
            exit 1
          }
      register: pdc_test

    - name: Fail if PDC is unreachable
      fail:
        msg: "Cannot reach forest root PDC at 192.168.35.20. Verify KOA-DC is online."
      when: pdc_test.rc != 0

    - name: Promote to replica domain controller
      microsoft.ad.domain_controller:
        dns_domain_name: arbor.lab
        domain_admin_user: "ARBOR\\Administrator"
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ windows_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        log_path: C:\Windows\NTDS
        state: domain_controller
        reboot: yes
      register: dc_promotion

    - name: Display promotion status
      debug:
        msg: "Replica DC promotion initiated. Server will reboot..."
      when: dc_promotion.changed

- name: Wait for replica DC to come online
  hosts: arbor_forest_root_replica
  gather_facts: no
  
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Wait for DC to reboot
      wait_for_connection:
        timeout: 600
        delay: 30

    - name: Wait for AD services to start
      pause:
        seconds: 60

    - name: Test WinRM connectivity
      ansible.windows.win_ping:
      register: ping_result
      retries: 5
      delay: 10
      until: ping_result is succeeded

- name: Verify replica DC and test replication
  hosts: arbor_forest_root_replica
  gather_facts: no
  
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Verify DC is operational
      ansible.windows.win_powershell:
        script: |
          try {
            $dc = Get-ADDomainController -Identity $env:COMPUTERNAME -ErrorAction Stop
            Write-Output "SUCCESS"
            Write-Output "Hostname: $($dc.HostName)"
            Write-Output "Site: $($dc.Site)"
            Write-Output "IsGlobalCatalog: $($dc.IsGlobalCatalog)"
            Write-Output "IsReadOnly: $($dc.IsReadOnly)"
            Write-Output "OperatingSystem: $($dc.OperatingSystem)"
            exit 0
          } catch {
            Write-Output "FAILED: $($_.Exception.Message)"
            exit 1
          }
      register: dc_verify
      retries: 3
      delay: 30
      until: dc_verify.rc == 0

    - name: Display DC information
      debug:
        msg:
          - "{{ dc_verify.stdout_lines }}"

    - name: Test replication with PDC
      ansible.windows.win_powershell:
        script: |
          try {
            # Get replication partners
            $partners = Get-ADReplicationPartnerMetadata -Target $env:COMPUTERNAME -ErrorAction Stop
            
            Write-Output "Replication Partners:"
            foreach ($partner in $partners) {
              Write-Output "  Partner: $($partner.Partner)"
              Write-Output "  LastSuccess: $($partner.LastReplicationSuccess)"
              Write-Output "  ConsecutiveFailures: $($partner.ConsecutiveReplicationFailures)"
            }
            
            # Force replication
            Write-Output ""
            Write-Output "Forcing replication sync..."
            repadmin /syncall /AdeP
            
            exit 0
          } catch {
            Write-Output "REPLICATION_CHECK_FAILED: $($_.Exception.Message)"
            exit 1
          }
      register: replication_test

    - name: Display replication status
      debug:
        msg:
          - "Replication Status:"
          - "{{ replication_test.stdout_lines }}"

    - name: Verify replication is healthy
      ansible.windows.win_powershell:
        script: |
          $failures = Get-ADReplicationFailure -Target $env:COMPUTERNAME -ErrorAction SilentlyContinue
          if ($failures) {
            Write-Output "REPLICATION_FAILURES_DETECTED"
            $failures | Format-List
            exit 1
          } else {
            Write-Output "REPLICATION_HEALTHY"
            exit 0
          }
      register: replication_health

    - name: Display replication health
      debug:
        msg: "Replication Health: {{ 'HEALTHY' if replication_health.rc == 0 else 'HAS FAILURES' }}"

- name: Update state files
  hosts: localhost
  gather_facts: yes

  tasks:
    - name: Update arbor.lab forest status
      copy:
        content: |
          # arbor.lab Forest Information
          # Generated: {{ ansible_date_time.iso8601 }}
          
          domain_built: yes
          forest_root_pdc: KOA-DC
          forest_root_pdc_ip: 192.168.35.20
          replica_dc: OAK-DC
          replica_dc_ip: 192.168.35.21
          replica_added: yes
          domain_name: arbor.lab
          domain_netbios: ARBOR
          
          domain_controllers:
            - name: KOA-DC
              ip: 192.168.35.20
              role: PDC
            - name: OAK-DC
              ip: 192.168.35.21
              role: Replica
          
          replication_status: healthy
          last_verified: {{ ansible_date_time.iso8601 }}
          
          next_steps:
            - Configure AD Sites and Services
            - Create service accounts
        dest: "{{ playbook_dir }}/../state/arbor-forest-status.yml"
        mode: '0644'

    - name: Display completion summary
      debug:
        msg:
          - "=========================================="
          - "âœ… REPLICA DC ADDED TO ARBOR.LAB"
          - "=========================================="
          - "Forest: arbor.lab"
          - "PDC: KOA-DC (192.168.35.20)"
          - "Replica: OAK-DC (192.168.35.21)"
          - "Status: Operational"
          - "Replication: Healthy"
          - ""
          - "arbor.lab forest is now complete!"
          - "=========================================="
