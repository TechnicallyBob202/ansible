---
- name: Build mauna.alpine.lab Child Domain PDC
  hosts: mauna_child_pdc
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if domain already exists
      ansible.windows.win_powershell:
        script: |
          try {
            $domain = Get-ADDomain -Identity "mauna.alpine.lab" -ErrorAction Stop
            Write-Output "EXISTS"
            Write-Output $domain.DomainSID.Value
          } catch {
            Write-Output "NOT_EXISTS"
          }
      register: domain_check
      failed_when: false
      changed_when: false

    - name: Set domain status facts
      set_fact:
        mauna_domain_exists: "{{ 'EXISTS' in domain_check.output[0] if domain_check.output is defined and domain_check.output | length > 0 else false }}"
        mauna_domain_sid: "{{ domain_check.output[1] if domain_check.output is defined and domain_check.output | length > 1 else '' }}"
      delegate_to: localhost
      delegate_facts: yes

    - name: Display domain status
      debug:
        msg: "mauna.alpine.lab domain {{ 'already exists' if hostvars['localhost']['mauna_domain_exists'] else 'does not exist - will create' }}"

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
      when: not hostvars['localhost']['mauna_domain_exists']
      register: ad_install

    - name: Promote to child domain PDC
      ansible.windows.win_powershell:
        script: |
          $ErrorActionPreference = "Stop"
          $SecurePassword = ConvertTo-SecureString "{{ windows_password }}" -AsPlainText -Force
          $ParentCred = New-Object System.Management.Automation.PSCredential("ALPINE\Administrator", $SecurePassword)

          Install-ADDSDomain `
            -NewDomainName "mauna" `
            -ParentDomainName "alpine.lab" `
            -DomainType "ChildDomain" `
            -SafeModeAdministratorPassword $SecurePassword `
            -Credential $ParentCred `
            -InstallDNS `
            -CreateDnsDelegation `
            -DatabasePath "C:\Windows\NTDS" `
            -SysvolPath "C:\Windows\SYSVOL" `
            -LogPath "C:\Windows\NTDS" `
            -Force `
            -NoRebootOnCompletion:$false

          Write-Output "Domain creation initiated"
      when: not hostvars['localhost']['mauna_domain_exists']
      async: 1200
      poll: 0
      register: domain_promotion

    - name: Wait for promotion to complete
      async_status:
        jid: "{{ domain_promotion.ansible_job_id }}"
      register: job_result
      until: job_result.finished
      retries: 40
      delay: 30
      when:
        - not hostvars['localhost']['mauna_domain_exists']
        - domain_promotion.ansible_job_id is defined

    - name: Wait for PDC to come back after reboot
      wait_for_connection:
        timeout: 900
        delay: 60
      when: not hostvars['localhost']['mauna_domain_exists']

    - name: Verify domain promotion
      ansible.windows.win_powershell:
        script: |
          Start-Sleep -Seconds 30
          $domain = Get-ADDomain -Identity "mauna.alpine.lab"
          Write-Output "Domain: $($domain.DNSRoot)"
          Write-Output "NetBIOS: $($domain.NetBIOSName)"
          Write-Output "SID: $($domain.DomainSID.Value)"
          Write-Output "Parent: $($domain.ParentDomain)"
      register: verify_domain
      when: not hostvars['localhost']['mauna_domain_exists']
      retries: 5
      delay: 30
      until: verify_domain is succeeded

    - name: Display verification results
      debug:
        msg: "{{ verify_domain.output }}"
      when:
        - not hostvars['localhost']['mauna_domain_exists']
        - verify_domain.output is defined

    - name: Get domain SID after creation
      ansible.windows.win_powershell:
        script: |
          $domain = Get-ADDomain -Identity "mauna.alpine.lab"
          Write-Output $domain.DomainSID.Value
      register: new_domain_sid
      when: not hostvars['localhost']['mauna_domain_exists']

    - name: Update domain SID fact
      set_fact:
        mauna_domain_sid: "{{ new_domain_sid.output[0] }}"
      delegate_to: localhost
      delegate_facts: yes
      when:
        - not hostvars['localhost']['mauna_domain_exists']
        - new_domain_sid.output is defined
        - new_domain_sid.output | length > 0

- name: Save mauna.alpine.lab Domain SID
  hosts: localhost
  gather_facts: yes
  tasks:
    - name: Create domain SIDs file
      copy:
        content: |
          # mauna.alpine.lab Domain SID
          # Generated: {{ ansible_date_time.iso8601 }}

          mauna.alpine.lab={{ hostvars['localhost']['mauna_domain_sid'] }}
        dest: "{{ playbook_dir }}/../files/mauna-domain-sid.txt"
      when: hostvars['localhost']['mauna_domain_sid'] is defined

    - name: Display completion
      debug:
        msg: "mauna.alpine.lab child domain PDC build complete. Domain SID: {{ hostvars['localhost']['mauna_domain_sid'] }}"