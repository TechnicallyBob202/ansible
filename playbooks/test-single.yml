---
- name: Test Deploy Single VM - No Cloud-Init
  hosts: localhost
  gather_facts: no

  vars:
    # Proxmox connection details
    proxmox_host: 192.168.33.21
    proxmox_node: semperis-nuc-1
    proxmox_user: root@pam
    proxmox_password: "{{ lookup('env', 'proxmox-root-password') }}"
    validate_certs: no

    # Template (clean Windows without cloudbase-init)
    template_id: 9001

    # Network configuration - VLAN 35
    network_bridge: vmbr0
    network_vlan: 35

    # Test VM details
    test_vm:
      name: TEST-VM01
      vmid: 3599
      cores: 2
      memory: 4096
      disk_size: 80G
      description: "Test VM - No Cloud-Init"

  tasks:
    - name: Check Proxmox password is set
      assert:
        that:
          - proxmox_password != ''
        fail_msg: "proxmox-root-password secret must be set in Semaphore Key Store"
        success_msg: "Proxmox authentication configured"

    - name: Display test deployment info
      debug:
        msg:
          - "=========================================="
          - "Single VM Test Deployment (No Cloud-Init)"
          - "=========================================="
          - "VM Name: {{ test_vm.name }}"
          - "VM ID: {{ test_vm.vmid }}"
          - "Host: {{ proxmox_host }}"
          - "Node: {{ proxmox_node }}"
          - "Template: {{ template_id }}"
          - "VLAN: {{ network_vlan }}"
          - "=========================================="

    - name: Clone VM from template
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ template_id }}"
        clone: "{{ template_id }}"
        newid: "{{ test_vm.vmid }}"
        name: "{{ test_vm.name }}"
        description: "{{ test_vm.description }}"
        full: yes
        timeout: 300
      register: clone_result

    - name: Display clone result
      debug:
        msg: "Clone operation: {{ 'Success' if clone_result is succeeded else 'Failed' }}"

    - name: Wait for clone to complete
      pause:
        seconds: 5

    - name: Configure network interface with VLAN tag
      community.general.proxmox_nic:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        interface: net0
        bridge: "{{ network_bridge }}"
        tag: "{{ network_vlan }}"
      register: nic_result

    - name: Display NIC configuration result
      debug:
        msg: "NIC configuration: {{ 'Success' if nic_result is succeeded else 'Failed' }}"

    - name: Configure VM hardware resources
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        node: "{{ proxmox_node }}"
        name: "{{ test_vm.name }}"
        cores: "{{ test_vm.cores }}"
        memory: "{{ test_vm.memory }}"
        update: yes
      register: hardware_result

    - name: Display hardware configuration result
      debug:
        msg: "Hardware config: {{ 'Success' if hardware_result is succeeded else 'Failed' }}"

    - name: Resize VM disk
      community.general.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        disk: scsi0
        size: "{{ test_vm.disk_size }}"
        state: resized
      register: disk_result

    - name: Display disk resize result
      debug:
        msg: "Disk resize: {{ 'Success' if disk_result is succeeded else 'Failed' }}"

    - name: Start the VM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        node: "{{ proxmox_node }}"
        state: started
      register: start_result

    - name: Display VM start result
      debug:
        msg: "VM start: {{ 'Success' if start_result is succeeded else 'Failed' }}"

    - name: Wait for VM to boot
      pause:
        seconds: 30
        prompt: "Waiting 30 seconds for VM to boot..."

    - name: Display test completion summary
      debug:
        msg:
          - "=========================================="
          - "Test Deployment Complete!"
          - "=========================================="
          - ""
          - "VM Details:"
          - "  Name: {{ test_vm.name }}"
          - "  VM ID: {{ test_vm.vmid }}"
          - "  vCPU: {{ test_vm.cores }}"
          - "  RAM: {{ test_vm.memory }}MB"
          - "  Disk: {{ test_vm.disk_size }}"
          - "  VLAN: {{ network_vlan }}"
          - ""
          - "Next Steps:"
          - "  1. VM will boot with DHCP IP"
          - "  2. Check Proxmox console for VM status"
          - "  3. Find DHCP IP: ssh root@{{ proxmox_host }} 'qm guest cmd {{ test_vm.vmid }} network-get-interfaces'"
          - "  4. RDP to DHCP IP with Administrator / [your password]"
          - "  5. Verify hostname (should be random until we configure it)"
          - "  6. Run IP configuration playbook to set static IP"
          - ""
          - "Verification Commands:"
          - "  ssh root@{{ proxmox_host }} 'qm status {{ test_vm.vmid }}'"
          - ""
          - "If everything works, run full deployment!"
          - "=========================================="

    - name: Provide cleanup instructions
      debug:
        msg:
          - ""
          - "To cleanup this test VM:"
          - "  ssh root@{{ proxmox_host }} 'qm stop {{ test_vm.vmid }} && qm destroy {{ test_vm.vmid }}'"