---
- name: Test Deploy Single VM - Semperis Lab
  hosts: localhost
  gather_facts: no

  vars:
    # Proxmox connection details
    proxmox_host: 192.168.33.21  # Testing on nuc-1
    proxmox_node: semperis-nuc-1
    proxmox_user: root@pam
    proxmox_password: "{{ lookup('env', 'proxmox-root-password') }}"
    validate_certs: no

    # Template
    template_id: 9000

    # Network configuration - VLAN 35
    network_bridge: vmbr0
    network_vlan: 35
    network_gateway: 192.168.35.1
    dns_servers: "192.168.33.6,192.168.33.7"

    # Test VM details
    test_vm:
      name: TEST-VM01
      vmid: 3599
      ip: 192.168.35.99
      cores: 2
      memory: 4096
      disk_size: 80G
      description: "Test VM - Single Deploy"

  tasks:
    - name: Ensure proxmoxer Python library is installed
      pip:
        name:
          - proxmoxer
          - requests
        state: present
        executable: pip3
        break_system_packages: yes
      delegate_to: localhost
      become: yes
      ignore_errors: yes  # In case we don't have sudo access

    - name: Check Proxmox password is set
      assert:
        that:
          - proxmox_password != ''
        fail_msg: "proxmox-root-password secret must be set in Semaphore Key Store"
        success_msg: "Proxmox authentication configured"

    - name: Display test deployment info
      debug:
        msg:
          - "=========================================="
          - "Single VM Test Deployment"
          - "=========================================="
          - "VM Name: {{ test_vm.name }}"
          - "VM ID: {{ test_vm.vmid }}"
          - "IP Address: {{ test_vm.ip }}"
          - "Host: {{ proxmox_host }}"
          - "Node: {{ proxmox_node }}"
          - "Template: {{ template_id }}"
          - "VLAN: {{ network_vlan }}"
          - "=========================================="

    - name: Clone VM from template
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        node: "{{ proxmox_node }}"
        vmid: "{{ template_id }}"
        clone: "{{ template_id }}"
        newid: "{{ test_vm.vmid }}"
        name: "{{ test_vm.name }}"
        description: "{{ test_vm.description }}"
        full: yes
        timeout: 300
      register: clone_result

    - name: Display clone result
      debug:
        msg: "Clone operation: {{ 'Success' if clone_result is succeeded else 'Failed' }}"

    - name: Wait for clone to complete
      pause:
        seconds: 10

    - name: Configure network interface with VLAN tag
      community.general.proxmox_nic:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        interface: net0
        bridge: "{{ network_bridge }}"
        tag: "{{ network_vlan }}"
      register: nic_result

    - name: Display NIC configuration result
      debug:
        msg: "NIC configuration: {{ 'Success' if nic_result is succeeded else 'Failed' }}"

    - name: Configure VM hardware resources
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        node: "{{ proxmox_node }}"
        name: "{{ test_vm.name }}"
        cores: "{{ test_vm.cores }}"
        memory: "{{ test_vm.memory }}"
        update: yes
      register: hardware_result

    - name: Display hardware configuration result
      debug:
        msg: "Hardware config: {{ 'Success' if hardware_result is succeeded else 'Failed' }}"

    - name: Resize VM disk
      community.general.proxmox_disk:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        disk: scsi0
        size: "{{ test_vm.disk_size }}"
        state: resized
      register: disk_result

    - name: Display disk resize result
      debug:
        msg: "Disk resize: {{ 'Success' if disk_result is succeeded else 'Failed' }}"

    - name: Configure network settings via cloud-init
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        node: "{{ proxmox_node }}"
        ipconfig:
          ipconfig0: "ip={{ test_vm.ip }}/24,gw={{ network_gateway }}"
        nameservers: "{{ dns_servers }}"
        update: yes
      register: cloudinit_result

    - name: Display cloud-init configuration result
      debug:
        msg: "Cloud-init config: {{ 'Success' if cloudinit_result is succeeded else 'Failed' }}"

    - name: Start the VM
      community.general.proxmox_kvm:
        api_host: "{{ proxmox_host }}"
        api_user: "{{ proxmox_user }}"
        api_password: "{{ proxmox_password }}"
        validate_certs: "{{ validate_certs }}"
        vmid: "{{ test_vm.vmid }}"
        node: "{{ proxmox_node }}"
        state: started
      register: start_result

    - name: Display VM start result
      debug:
        msg: "VM start: {{ 'Success' if start_result is succeeded else 'Failed' }}"

    - name: Wait for VM to boot and cloud-init to run
      pause:
        seconds: 30
        prompt: "Waiting 30 seconds for VM to boot and cloud-init to configure..."

    - name: Display test completion summary
      debug:
        msg:
          - "=========================================="
          - "Test Deployment Complete!"
          - "=========================================="
          - ""
          - "VM Details:"
          - "  Name: {{ test_vm.name }}"
          - "  VM ID: {{ test_vm.vmid }}"
          - "  IP Address: {{ test_vm.ip }}"
          - "  vCPU: {{ test_vm.cores }}"
          - "  RAM: {{ test_vm.memory }}MB"
          - "  Disk: {{ test_vm.disk_size }}"
          - ""
          - "Next Steps:"
          - "  1. Verify VM is running on Proxmox"
          - "  2. Ping {{ test_vm.ip }}"
          - "  3. RDP to {{ test_vm.ip }}"
          - "  4. Login: Administrator / [your password]"
          - "  5. Check hostname: should be {{ test_vm.name }}"
          - "  6. Check IP: should be {{ test_vm.ip }}"
          - "  7. Check DNS: should be {{ dns_servers }}"
          - ""
          - "Verification Commands:"
          - "  ssh root@{{ proxmox_host }} 'qm status {{ test_vm.vmid }}'"
          - "  ping {{ test_vm.ip }}"
          - "  rdesktop {{ test_vm.ip }}"
          - ""
          - "If everything works, run full deployment!"
          - "=========================================="

    - name: Provide cleanup instructions
      debug:
        msg:
          - ""
          - "To cleanup this test VM:"
          - "  ssh root@{{ proxmox_host }} 'qm stop {{ test_vm.vmid }} && qm destroy {{ test_vm.vmid }}'"
          - ""
          - "Or run: ansible-playbook cleanup-test-vm.yml"