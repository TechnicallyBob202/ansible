---
- name: Add mauna.alpine.lab Replica DC
  hosts: mauna_child_replica
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          if ($CS.DomainRole -ge 4) {
            Write-Output "IS_DC"
            Write-Output "Domain: $($CS.Domain)"
          } else {
            Write-Output "NOT_DC"
          }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Set DC status
      set_fact:
        is_already_dc: "{{ 'IS_DC' in dc_check.output[0] if dc_check.output is defined and dc_check.output | length > 0 else false }}"

    - name: Display DC status
      debug:
        msg: "{{ inventory_hostname }} {{ 'is already a DC' if is_already_dc else 'is not a DC - will promote' }}"

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
      when: not is_already_dc
      register: ad_install

    - name: Display installation result
      debug:
        msg: "AD-DS installation {{ 'completed' if ad_install.changed else 'was already present' }}"
      when: not is_already_dc

    - name: Promote to replica DC
      microsoft.ad.domain_controller:
        dns_domain_name: mauna.alpine.lab
        domain_admin_user: ALPINE\Administrator
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ windows_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        state: domain_controller
        reboot: yes
      when: not is_already_dc
      register: dc_promotion

    - name: Wait for replica to come back after reboot
      wait_for_connection:
        timeout: 600
        delay: 30
      when: not is_already_dc

    - name: Verify DC promotion
      ansible.windows.win_powershell:
        script: |
          $CS = Get-WmiObject Win32_ComputerSystem
          Write-Output "Hostname: $($CS.Name)"
          Write-Output "Domain: $($CS.Domain)"
          Write-Output "DomainRole: $($CS.DomainRole)"

          try {
            $DC = Get-ADDomainController -Identity $env:COMPUTERNAME
            Write-Output "Site: $($DC.Site)"
            Write-Output "IsGlobalCatalog: $($DC.IsGlobalCatalog)"
            Write-Output "IsReadOnly: $($DC.IsReadOnly)"
            Write-Output "OperatingSystem: $($DC.OperatingSystem)"
          } catch {
            Write-Output "Error getting DC details: $($_.Exception.Message)"
          }
      register: verify_dc
      retries: 3
      delay: 10
      until: verify_dc is succeeded

    - name: Display verification results
      debug:
        msg: "{{ verify_dc.output }}"
      when: verify_dc.output is defined

    - name: Test replication
      ansible.windows.win_powershell:
        script: |
          Write-Output "=== Replication Partners ==="
          $partners = Get-ADReplicationPartnerMetadata -Target $env:COMPUTERNAME
          foreach ($partner in $partners) {
            Write-Output "Partner: $($partner.Partner) | LastSync: $($partner.LastReplicationSuccess)"
          }

          Write-Output "`n=== Forcing Replication ==="
          repadmin /syncall /AdeP
          Write-Output "Replication sync initiated"
      register: replication_test
      failed_when: false

    - name: Display replication results
      debug:
        msg: "{{ replication_test.output }}"
      when: replication_test.output is defined

- name: Summary
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Display completion
      debug:
        msg: "mauna.alpine.lab replica DC deployment complete"