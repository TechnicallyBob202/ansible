---
# ==========================================
# DOMAIN FOREST BUILD PLAYBOOK
# ==========================================
- name: Build forests and domains
  hosts: localhost
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env','WINDOWS_PASSWORD') }}"
    domains:
      - name: arbor.lab
        fact: arbor_domain
        netbios: ARBOR
        pdc_hosts: ["KOA-DC"]
        replica_hosts: ["OAK-DC"]
      - name: alpine.lab
        fact: alpine_domain
        netbios: ALPINE
        pdc_hosts: ["ALPINE-PDC"]
        replica_hosts: ["ALPINE-REP"]
      - name: mauna.alpine.lab
        fact: mauna_domain
        netbios: MAUNA
        parent_domain: alpine.lab
        pdc_hosts: ["MAUNA-PDC"]
        replica_hosts: ["MAUNA-REP"]
      - name: rainier.alpine.lab
        fact: rainier_domain
        netbios: RAINIER
        parent_domain: alpine.lab
        pdc_hosts: ["RAINIER-PDC"]
        replica_hosts: ["RAINIER-REP"]

  tasks:

    - name: Check if domains exist and get SID
      ansible.windows.win_powershell:
        script: |
          try {
            $domain = Get-ADDomain -Identity "{{ item.name }}" -ErrorAction Stop
            Write-Output $domain.DomainSID.Value
            exit 0
          } catch {
            Write-Output "DOMAIN_NOT_FOUND"
            exit 1
          }
      register: domain_check
      failed_when: false
      changed_when: false
      loop: "{{ domains }}"
      loop_control:
        loop_var: item

    - name: Set domain facts
      set_fact:
        "{{ item.fact }}_exists": "{{ (domain_check.results[loop.index0].rc == 0) }}"
        "{{ item.fact }}_sid": "{{ domain_check.results[loop.index0].stdout_lines[0] if domain_check.results[loop.index0].rc == 0 else '' }}"
      loop: "{{ domains }}"
      loop_control:
        loop_var: item

    - name: Build PDC for missing domains
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
      when: not hostvars['localhost'][item.fact + '_exists']
      loop: "{{ domains }}"
      loop_control:
        loop_var: item

    - name: Promote PDC if domain missing
      block:
        - name: Promote PDC
          microsoft.ad.domain:
            dns_domain_name: "{{ item.name }}"
            domain_netbios_name: "{{ item.netbios }}"
            safe_mode_password: "{{ windows_password }}"
            create_dns_delegation: no
            database_path: C:\Windows\NTDS
            sysvol_path: C:\Windows\SYSVOL
            reboot: yes
          register: pdc_promote

        - name: Wait for PDC connection
          wait_for_connection:
            timeout: 600
            delay: 30

        - name: Test PDC connectivity
          ansible.windows.win_powershell:
            script: Test-NetConnection -ComputerName {{ item.pdc_hosts[0] }} -Port 5985 -InformationLevel Quiet
          register: pdc_test
          failed_when: pdc_test.rc != 0

        - name: Get domain SID after PDC creation
          ansible.windows.win_powershell:
            script: |
              $domain = Get-ADDomain -Identity "{{ item.name }}"
              Write-Output $domain.DomainSID.Value
          register: new_domain_sid

        - name: Update domain SID fact
          set_fact:
            "{{ item.fact }}_sid": "{{ new_domain_sid.stdout_lines[0] }}"
      when: not hostvars['localhost'][item.fact + '_exists']
      loop: "{{ domains }}"
      loop_control:
        loop_var: item

    - name: Promote replica DCs
      block:
        - name: Check if host is already DC
          ansible.windows.win_powershell:
            script: |
              $DC = Get-WmiObject Win32_ComputerSystem
              if ($DC.DomainRole -ge 4) { exit 0 } else { exit 1 }
          register: is_dc
          failed_when: false
          changed_when: false
          delegate_to: "{{ host }}"
          with_items: "{{ item.replica_hosts }}"
          loop_control:
            loop_var: host

        - name: Install AD-Domain-Services on replica
          ansible.windows.win_feature:
            name: AD-Domain-Services
            include_management_tools: yes
          when: is_dc.results[loop.index0].rc != 0
          delegate_to: "{{ host }}"
          loop: "{{ item.replica_hosts }}"
          loop_control:
            loop_var: host

        - name: Promote replica DC
          microsoft.ad.domain_controller:
            dns_domain_name: "{{ item.name }}"
            domain_admin_user: "{{ (item.parent_domain | default(item.name.split('.')[0])) + '\\Administrator' }}"
            domain_admin_password: "{{ windows_password }}"
            safe_mode_password: "{{ windows_password }}"
            database_path: C:\Windows\NTDS
            sysvol_path: C:\Windows\SYSVOL
            state: domain_controller
            reboot: yes
          when: is_dc.results[loop.index0].rc != 0
          delegate_to: "{{ host }}"
          loop: "{{ item.replica_hosts }}"
          loop_control:
            loop_var: host

        - name: Wait for replica connection
          wait_for_connection:
            timeout: 600
            delay: 30
          delegate_to: "{{ host }}"
          loop: "{{ item.replica_hosts }}"
          loop_control:
            loop_var: host

        - name: Test replica connectivity
          ansible.windows.win_powershell:
            script: Test-NetConnection -ComputerName {{ host }} -Port 5985 -InformationLevel Quiet
          register: replica_test
          failed_when: replica_test.rc != 0
          delegate_to: localhost
          loop: "{{ item.replica_hosts }}"
          loop_control:
            loop_var: host

      loop: "{{ domains }}"
      loop_control:
        loop_var: item

    - name: Write domain SIDs to file
      copy:
        dest: "{{ playbook_dir }}/../files/domain-sids.txt"
        content: |
          # Lab Domain SIDs
          # Generated: {{ ansible_date_time.iso8601 }}
          {% for domain in domains %}
          {{ domain.name }}={{ hostvars['localhost'][domain.fact + '_sid'] }}
          {% endfor %}

    - name: Completion message
      debug:
        msg: "All forests and domains processed. Domain SIDs written to files/domain-sids.txt"
