---
- name: Build arbor.lab Forest
  hosts: arbor_forest_root_pdc
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $DC = Get-WmiObject Win32_ComputerSystem
          if ($DC.DomainRole -ge 4) { Write-Output "1" } else { Write-Output "0" }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      when: dc_check.output[0] | int == 0

    - name: Promote to forest root PDC
      microsoft.ad.domain:
        dns_domain_name: arbor.lab
        domain_netbios_name: ARBOR
        safe_mode_password: "{{ windows_password }}"
        create_dns_delegation: no
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      when: dc_check.output[0] | int == 0

    - name: Wait for DC to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when: dc_check.output[0] | int == 0

    - name: Wait until DC is responding
      ansible.windows.win_powershell:
        script: |
          try {
              Get-ADDomainController -ErrorAction Stop
              exit 0
          } catch {
              exit 1
          }
      register: dc_ready
      retries: 20
      delay: 15
      until: dc_ready.rc == 0
      when: dc_check.output[0] | int == 0

- name: Promote arbor.lab Replica DC
  hosts: arbor_forest_root_replica
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $DC = Get-WmiObject Win32_ComputerSystem
          if ($DC.DomainRole -ge 4) { Write-Output "1" } else { Write-Output "0" }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      when: dc_check.output[0] | int == 0

    - name: Promote to replica DC
      microsoft.ad.domain_controller:
        dns_domain_name: arbor.lab
        domain_admin_user: ARBOR\Administrator
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ windows_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        state: domain_controller
        reboot: yes
      when: dc_check.output[0] | int == 0

    - name: Wait for DC to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when: dc_check.output[0] | int == 0

    - name: Wait until DC is responding
      ansible.windows.win_powershell:
        script: |
          try {
              Get-ADDomainController -ErrorAction Stop
              exit 0
          } catch {
              exit 1
          }
      register: dc_ready
      retries: 20
      delay: 15
      until: dc_ready.rc == 0
      when: dc_check.output[0] | int == 0

- name: Build alpine.lab Forest Root
  hosts: alpine_forest_root_pdc
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $DC = Get-WmiObject Win32_ComputerSystem
          if ($DC.DomainRole -ge 4) { Write-Output "1" } else { Write-Output "0" }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      when: dc_check.output[0] | int == 0

    - name: Promote to forest root PDC
      microsoft.ad.domain:
        dns_domain_name: alpine.lab
        domain_netbios_name: ALPINE
        safe_mode_password: "{{ windows_password }}"
        create_dns_delegation: no
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        reboot: yes
      when: dc_check.output[0] | int == 0

    - name: Wait for DC to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when: dc_check.output[0] | int == 0

    - name: Wait until DC is responding
      ansible.windows.win_powershell:
        script: |
          try {
              Get-ADDomainController -ErrorAction Stop
              exit 0
          } catch {
              exit 1
          }
      register: dc_ready
      retries: 20
      delay: 15
      until: dc_ready.rc == 0
      when: dc_check.output[0] | int == 0

- name: Promote alpine.lab Replica DC
  hosts: alpine_forest_root_replica
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $DC = Get-WmiObject Win32_ComputerSystem
          if ($DC.DomainRole -ge 4) { Write-Output "1" } else { Write-Output "0" }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      when: dc_check.output[0] | int == 0

    - name: Promote to replica DC
      microsoft.ad.domain_controller:
        dns_domain_name: alpine.lab
        domain_admin_user: ALPINE\Administrator
        domain_admin_password: "{{ windows_password }}"
        safe_mode_password: "{{ windows_password }}"
        database_path: C:\Windows\NTDS
        sysvol_path: C:\Windows\SYSVOL
        state: domain_controller
        reboot: yes
      when: dc_check.output[0] | int == 0

    - name: Wait for DC to come back online
      wait_for_connection:
        timeout: 600
        delay: 30
      when: dc_check.output[0] | int == 0

    - name: Wait until DC is responding
      ansible.windows.win_powershell:
        script: |
          try {
              Get-ADDomainController -ErrorAction Stop
              exit 0
          } catch {
              exit 1
          }
      register: dc_ready
      retries: 20
      delay: 15
      until: dc_ready.rc == 0
      when: dc_check.output[0] | int == 0

- name: Create mauna.alpine.lab Child Domain
  hosts: mauna_child_pdc
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"

  tasks:
    - name: Check if already a DC
      ansible.windows.win_powershell:
        script: |
          $DC = Get-WmiObject Win32_ComputerSystem
          if ($DC.DomainRole -ge 4) { Write-Output "1" } else { Write-Output "0" }
      register: dc_check
      failed_when: false
      changed_when: false

    - name: Install AD-Domain-Services
      ansible.windows.win_feature:
        name: AD-Domain-Services
        include_management_tools: yes
        state: present
      when: dc_check.output[0] | int == 0

    - name: Promote to child domain PDC
      ansible.windows.win_powershell:
        script: |
          $ErrorActionPreference = "Stop"
          $SecurePassword = ConvertTo-SecureString "{{ windows_password }}" -AsPlainText -Force
          $ParentCred = New-Object System.Management.Automation.PSCredential("ALPINE\Administrator", $SecurePassword)
          Install-ADDSDomain `
            -NewDomainName "mauna" `
            -ParentDomainName "alpine.lab" `
            -SafeModeAdministratorPassword $SecurePassword `
            -Credential $ParentCred `
            -InstallDNS `
            -DatabasePath "C:\Windows\NTDS" `
            -SysvolPath "C:\Windows\SYSVOL" `
            -LogPath "C:\Windows\NTDS" `
            -Force `
            -NoRebootOnCompletion:$false
      async: 1200
      poll:
