---
# ==========================================
# DOMAIN BUILD PLAYBOOK
# Handles multiple forests and DCs with proper loops
# ==========================================

- name: Process all domains
  hosts: all
  gather_facts: no
  vars:
    windows_password: "{{ lookup('env', 'WINDOWS_PASSWORD') }}"
    domains:
      - name: "arbor.lab"
        netbios_name: "ARBOR"
        pdc_hosts: ["arbor_forest_root_pdc"]
        replica_hosts: ["arbor_forest_root_replica"]
      - name: "alpine.lab"
        netbios_name: "ALPINE"
        pdc_hosts: ["alpine_forest_root_pdc"]
        replica_hosts: ["alpine_forest_root_replica"]
      - name: "mauna.alpine.lab"
        netbios_name: "MAUNA"
        parent_domain: "alpine.lab"
        pdc_hosts: ["mauna_child_pdc"]
        replica_hosts: ["mauna_child_replica"]
      - name: "rainier.alpine.lab"
        netbios_name: "RAINIER"
        parent_domain: "alpine.lab"
        pdc_hosts: ["rainier_child_pdc"]
        replica_hosts: ["rainier_child_replica"]
  tasks:

    - name: Process each domain
      block:

        - name: Check if domain exists
          ansible.windows.win_powershell:
            script: |
              try {
                $domain = Get-ADDomain -Identity "{{ item.name }}" -ErrorAction Stop
                Write-Output $domain.DomainSID.Value
                exit 0
              } catch {
                Write-Output "DOMAIN_NOT_FOUND"
                exit 1
              }
          register: domain_check
          failed_when: false
          changed_when: false
          delegate_to: localhost

        - name: Set domain facts
          set_fact:
            "{{ item.name | replace('.', '_') }}_exists": "{{ domain_check.rc == 0 }}"
            "{{ item.name | replace('.', '_') }}_sid": "{{ domain_check.stdout_lines[0] if domain_check.rc == 0 else '' }}"
          delegate_to: localhost
          delegate_facts: yes

        - name: Build PDC if domain does not exist
          block:
            - name: Install AD-Domain-Services on PDC
              ansible.windows.win_feature:
                name: AD-Domain-Services
                include_management_tools: yes
              delegate_to: "{{ host }}"
            - name: Promote PDC
              when: item.parent_domain is defined
              ansible.windows.win_powershell:
                script: |
                  $ErrorActionPreference = "Stop"
                  $SecurePassword = ConvertTo-SecureString "{{ windows_password }}" -AsPlainText -Force
                  $ParentCred = New-Object System.Management.Automation.PSCredential("{{ item.parent_domain.split('.')[0] }}\Administrator", $SecurePassword)
                  Install-ADDSDomain `
                    -NewDomainName "{{ item.name.split('.')[0] }}" `
                    -ParentDomainName "{{ item.parent_domain }}" `
                    -SafeModeAdministratorPassword $SecurePassword `
                    -Credential $ParentCred `
                    -InstallDNS `
                    -DatabasePath "C:\Windows\NTDS" `
                    -SysvolPath "C:\Windows\SYSVOL" `
                    -LogPath "C:\Windows\NTDS" `
                    -Force `
                    -NoRebootOnCompletion:$false
              when: not hostvars['localhost'][item.name | replace('.', '_') + '_exists']
              delegate_to: "{{ host }}"
            - name: Promote forest root PDC if no parent_domain
              microsoft.ad.domain:
                dns_domain_name: "{{ item.name }}"
                domain_netbios_name: "{{ item.netbios_name }}"
                safe_mode_password: "{{ windows_password }}"
                create_dns_delegation: no
                database_path: C:\Windows\NTDS
                sysvol_path: C:\Windows\SYSVOL
                reboot: yes
              when: item.parent_domain is not defined and not hostvars['localhost'][item.name | replace('.', '_') + '_exists']
              delegate_to: "{{ host }}"

            - name: Wait for PDC to come back
              wait_for_connection:
                timeout: 900
                delay: 30
              delegate_to: "{{ host }}"

            - name: Test PDC connectivity
              ansible.windows.win_powershell:
                script: Test-NetConnection -ComputerName {{ host }} -Port 5985 -InformationLevel Quiet
              register: pdc_test
              failed_when: pdc_test.rc != 0
              delegate_to: "{{ host }}"

        loop: "{{ item.pdc_hosts }}"
        loop_control:
          loop_var: host

        - name: Promote replica DCs
          block:
            - name: Install AD-Domain-Services on replica
              ansible.windows.win_feature:
                name: AD-Domain-Services
                include_management_tools: yes
              delegate_to: "{{ host }}"

            - name: Promote to replica DC
              microsoft.ad.domain_controller:
                dns_domain_name: "{{ item.name }}"
                domain_admin_user: "{{ (item.parent_domain | default(item.name.split('.')[0])) + '\\Administrator' }}"
                domain_admin_password: "{{ windows_password }}"
                safe_mode_password: "{{ windows_password }}"
                database_path: C:\Windows\NTDS
                sysvol_path: C:\Windows\SYSVOL
                state: domain_controller
                reboot: yes
              when: not hostvars['localhost'][item.name | replace('.', '_') + '_exists']
              delegate_to: "{{ host }}"

            - name: Wait for replica to come back
              wait_for_connection:
                timeout: 600
                delay: 30
              delegate_to: "{{ host }}"

            - name: Test replica connectivity
              ansible.windows.win_powershell:
                script: Test-NetConnection -ComputerName {{ host }} -Port 5985 -InformationLevel Quiet
              register: replica_test
              failed_when: replica_test.rc != 0
              delegate_to: "{{ host }}"

        loop: "{{ item.replica_hosts }}"
        loop_control:
          loop_var: host

      loop: "{{ domains }}"
      loop_control:
        loop_var: item

- name: Write domain SIDs to file
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Save domain SIDs
      copy:
        dest: "{{ playbook_dir }}/../files/domain-sids.txt"
        content: |
          # Lab Domain SIDs
          # Generated: {{ ansible_date_time.iso8601 }}
          arbor.lab={{ arbor_lab_sid | default('') }}
          alpine.lab={{ alpine_lab_sid | default('') }}
          mauna.alpine.lab={{ mauna_alpine_lab_sid | default('') }}
          rainier.alpine.lab={{ rainier_alpine_lab_sid | default('') }}

    - name: Display completion
      debug:
        msg: "All domains processed. Domain SIDs written to files/domain-sids.txt"
